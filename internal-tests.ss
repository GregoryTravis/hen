(load "h.ss")

(define (run-test test) (mtch test (a b) (if (equal? a b) 'ok `(fail ,a ,b))))
(define (test)
  (let ((results
         (let ((some-funs '((fun (map 'f Nil) ('f Nil))
                            (fun (map 'f (Cons 'a 'd)) (Cons ('f 'a) (map 'f 'd)))
                            (fun (swap (P 'a 'd)) (P 'd 'a))
                            (fun (apply 'f . 'a) ('f . 'a)))))

           (map run-test
                `(
                  ,(list (match-maybe '(a B R c e) '('d B R 'f 'g)) '(just (('d . a) ('f . c) ('g . e))))
                  (,(match-maybe '('a 'B 'R 'c 'e) '(d 'B 'Rr f g)) fail)
                  (,(map ($ apply-bindings _ '(('d . a) ('f . c) ('g . e))) '('d 'f 'g Joe ('d 'f 'g Joe))) (a c e Joe (a c e Joe)))
                  (,(run '(boot (Cons Dop Nil)) '((fun (boot (Cons 'a Nil)) (Cons 'a (Cons 'a Nil))))) (Cons Dop (Cons Dop Nil)))
                  (,(run '(boot (Cons Dop Nil)) '((fun (boot (Cons 'a Nil)) (Cons 'a (Cons 'a Nil)))
                                                  (fun (boote (Cons 'a Nil)) (Cons 'a (Cons 'a Nil))))) (Cons Dop (Cons Dop Nil)))
                  (,(run '(boot (Cons Dop Nil)) '((fun (boote (Cons 'a Nil)) (Cons 'a (Cons 'a Nil)))
                                                  (fun (boot (Cons 'a Nil)) (Cons 'a (Cons 'a Nil))))) (Cons Dop (Cons Dop Nil)))
                  (,(run '(boote (Cons Dop Nil)) '((fun (boot (Cons 'a Nil)) (Cons 'a (Cons 'a Nil)))
                                                   (fun (boote (Cons 'a Nil)) (Cons 'a (Cons 'a Jerk))))) (Cons Dop (Cons Dop Jerk)))
                  (,(run '(boote (Cons Dop Nil)) '((fun (boote (Cons 'a Nil)) (Cons 'a (Cons 'a Jerk)))
                                                   (fun (boot (Cons 'a Nil)) (Cons 'a (Cons 'a Nil))))) (Cons Dop (Cons Dop Jerk)))
                  (,(run '(dumbify (Cons A (Cons B (Cons C Nil))))
                         '((fun (dumbify Nil) Nil) (fun (dumbify (Cons 'a 'd)) (Cons (Cons Dumb 'a) (dumbify 'd)))))
                   (Cons (Cons Dumb A) (Cons (Cons Dumb B) (Cons (Cons Dumb C) Nil))))
                  (,(run '(= Joe Joe) '()) True)
                  (,(run '(car (Cons Haha Nil)) '((fun (car (Cons 'a 'd)) 'a) (fun (cdr (Cons 'a 'd)) 'd) (fun (cons 'a 'd) (Cons 'a 'd)))) Haha)
                  (,(run '(car (Cons Haha (Cons HoHo Nil))) '((fun (car (Cons 'a 'd)) 'a) (fun (cdr (Cons 'a 'd)) 'd) (fun (cons 'a 'd) (Cons 'a 'd)))) Haha)
                  (,(run '(cdr (Cons Haha Nil)) '((fun (car (Cons 'a 'd)) 'a) (fun (cdr (Cons 'a 'd)) 'd) (fun (cons 'a 'd) (Cons 'a 'd)))) Nil)
                  (,(run '(cdr (Cons Haha (Cons HoHo Nil))) '((fun (car (Cons 'a 'd)) 'a) (fun (cdr (Cons 'a 'd)) 'd) (fun (cons 'a 'd) (Cons 'a 'd)))) (Cons HoHo Nil))
                  (,(run '(var? 'e) '()) True)
                  (,(run '(var? e) '()) False)
                  (,(run '(data? 'e) '()) False)
                  (,(run '(data? e) '()) True)
                  (,(run 'Foo '()) Foo)
                  ,(list (run '(current-program) '((fun (boote (Cons 'a Nil)) (Cons 'a (Cons 'a Jerk)))
                                                   (fun (boot (Cons 'a Nil)) (Cons 'a (Cons 'a Nil)))))
                         '(Cons (Cons fun (Cons (Cons boote (Cons (Cons Cons (Cons 'a (Cons Nil Nil))) Nil))
                                                (Cons (Cons Cons (Cons 'a (Cons (Cons Cons (Cons 'a (Cons Jerk Nil))) Nil))) Nil)))
                                (Cons (Cons fun (Cons (Cons boot (Cons (Cons Cons (Cons 'a (Cons Nil Nil))) Nil))
                                                      (Cons (Cons Cons (Cons 'a (Cons (Cons Cons (Cons 'a (Cons Nil Nil))) Nil))) Nil))) Nil)))
                  (,(run '(map swap (Cons (P A B) (Cons (P C D) Nil))) some-funs) (Cons (P B A) (Cons (P D C) (swap Nil))))
                  (,(run '(apply swap (P A B)) some-funs) (P B A))

                  ,(list (build-mapping-for-list '(1 2 3) (var-generator-generator 'a)) '((1 . 'a0) (2 . 'a1) (3 . 'a2)))
                  ,(list (build-mapping-for-list '(1 2 3) (var-generator-generator 'a))
                         '((1 . 'a0) (2 . 'a1) (3 . 'a2)))
                  ,(list (match-maybe '(bar (B (C 'd 'e))) '(bar (B 'a)))
                         '(just (('a C 'd 'e))))
                  ,(list (match-maybe '(bar (B 'a)) '(bar (B (C 'd 'e))))
                         'fail)
                  ,(list (apply-bindings '(bar (B 'a)) (just-value (match-maybe '(bar (B (C 'd 'e))) '(bar (B 'a)))))
                         '(bar (B (C 'd 'e))))

                  )))))
    (if (all? (map ($ eq? _ 'ok) results))
        '(ok)
        results)))
