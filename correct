+ ((/. x x) 1) 
- (I 1) 
=> 1 

+ ((/. x (x 2)) (/. x x)) 
- (((S I) (K 2)) I) 
=> 2 

+ (/. r r) 
- I 
=> I 

+ ((/. r r) 3) 
- (I 3) 
=> 3 

+ ((+ 10) 20) 
- ((+ 10) 20) 
=> 30 

+ ((+ ((/. x x) 2000)) 3000) 
- ((+ (I 2000)) 3000) 
=> 5000 

+ ((== 30) 30) 
- ((== 30) 30) 
=> True 

+ ((== 30) 40) 
- ((== 30) 40) 
=> False 

+ (((if True) 100) 200) 
- (((if True) 100) 200) 
=> 100 

+ (((if False) 100) 200) 
- (((if False) 100) 200) 
=> 200 

+ (tuct 10) 
- (tuct 10) 
=> 10 

+ ((+ 20) (tuct 10)) 
- ((+ 20) (tuct 10)) 
=> 30 

+ ((+ 20) (tuct 10)) 
- ((+ 20) (tuct 10)) 
=> 30 

+ ((- 40) 15) 
- ((- 40) 15) 
=> 25 

+ ((- 40) 15) 
- ((- 40) 15) 
=> 25 

+ ((* 10) 20) 
- ((* 10) 20) 
=> 200 

+ ((* 10) 20) 
- ((* 10) 20) 
=> 200 

+ (fact1 10) 
- (fact1 10) 
=> 3628800 

+ (fact2 10) 
- (fact2 10) 
=> 3628800 

+ (((if ((== 0) 3)) True) False) 
- (((if ((== 0) 3)) True) False) 
=> False 

+ (((if ((== 0) 0)) True) False) 
- (((if ((== 0) 0)) True) False) 
=> True 

+ ((/. n (((if ((== n) 3)) True) False)) 3) 
- (((S ((S ((S (K if)) ((S ((S (K ==)) I)) (K 3)))) (K True))) (K False)) 3) 
=> True 

+ ((/. n (((if ((== n) 3)) True) False)) 0) 
- (((S ((S ((S (K if)) ((S ((S (K ==)) I)) (K 3)))) (K True))) (K False)) 0) 
=> False 

+ (((if ((== 0) 0)) ((* 10) 20)) ((* 30) 40)) 
- (((if ((== 0) 0)) ((* 10) 20)) ((* 30) 40)) 
=> 200 

+ (((if ((== 3) 0)) ((* 10) 20)) ((* 30) 40)) 
- (((if ((== 3) 0)) ((* 10) 20)) ((* 30) 40)) 
=> 1200 

+ ((/. n (((if ((== n) 0)) 1) ((* n) ((- n) 1)))) 3) 
- (((S ((S ((S (K if)) ((S ((S (K ==)) I)) (K 0)))) (K 1))) ((S ((S (K *)) I)) ((S ((S (K -)) I)) (K 1)))) 3) 
=> 6 

+ ((cons 1) 2) 
- ((cons 1) 2) 
=> ((P 1) 2) 

+ (car ((cons 1) 2)) 
- (car ((cons 1) 2)) 
=> 1 

+ (cdr ((cons 1) 2)) 
- (cdr ((cons 1) 2)) 
=> 2 

+ ((cons 1) 2) 
- ((cons 1) 2) 
=> ((P 1) 2) 

+ (car ((cons 1) 2)) 
- (car ((cons 1) 2)) 
=> 1 

+ (cdr ((cons 1) 2)) 
- (cdr ((cons 1) 2)) 
=> 2 

+ (pair? ((cons 1) 2)) 
- (pair? ((cons 1) 2)) 
=> True 

+ (pair? (car ((cons 1) 2))) 
- (pair? (car ((cons 1) 2))) 
=> False 

+ (pair? (cdr ((cons 1) 2))) 
- (pair? (cdr ((cons 1) 2))) 
=> False 

+ (pair? ((cons 1) 2)) 
- (pair? ((cons 1) 2)) 
=> True 

+ (pair? (car ((cons 1) 2))) 
- (pair? (car ((cons 1) 2))) 
=> False 

+ (pair? (cdr ((cons 1) 2))) 
- (pair? (cdr ((cons 1) 2))) 
=> False 

((/.
  a0
  (((if (pair? a0)) ((/. a ((/. b ((+ a) b)) (cdr a0))) (car a0))) (FAIL a0)))
 ((S
   ((S ((S (K if)) ((S (K pair?)) I)))
    ((S
      ((S
        ((S (K S))
         ((S
           ((S (K S))
            ((S ((S (K S)) ((S (K K)) (K S))))
             ((S
               ((S (K S))
                ((S ((S (K S)) ((S (K K)) (K S))))
                 ((S ((S (K S)) ((S (K K)) (K K)))) ((S (K K)) (K +))))))
              ((S ((S (K S)) ((S (K K)) (K K)))) (K I))))))
          ((S (K K)) (K I)))))
       ((S ((S (K S)) ((S (K K)) (K cdr)))) ((S (K K)) I))))
     ((S (K car)) I))))
  ((S (K FAIL)) I))
 3)
