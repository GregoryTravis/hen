(/. ((P x) joe) x)
(/. ((P x) ((P y) ((P z) q))) x)
(f 1)
(f ((P 1) 2))
(f ((P 1) ((P 2) 3)))
(/. ((P a) ((P b) c)) (+ ((P a) ((P c) Nil))))
(ulp ((P 1) ((P 2) 3)))
((/. ((P a) ((P b) c)) ((+ a) c)) ((P 1) ((P 2) 3)))
((/. ((P a) ((P b) ((P c) Nil))) ((+ a) c)) ((P 1) ((P 2) ((P 3) Nil))))
+ ((/. ((P j) k) j) ((P 10) 20)) 
=> 10 

+ ((/. ((P j) k) k) ((P 10) 20)) 
=> 20 

+ ((/. ((P ((P j) jj)) ((P k) r)) j) ((P ((P 10) 100)) ((P 20) 30))) 
=> 10 

+ ((/. ((P ((P j) jj)) ((P k) r)) jj) ((P ((P 10) 100)) ((P 20) 30))) 
=> 100 

+ ((/. ((P ((P j) jj)) ((P k) r)) k) ((P ((P 10) 100)) ((P 20) 30))) 
=> 20 

+ ((/. ((P ((P j) jj)) ((P k) r)) r) ((P ((P 10) 100)) ((P 20) 30))) 
=> 30 

+ ((/. ((P j) ((P k) r)) j) ((P 10) ((P 20) 30))) 
=> 10 

+ ((/. ((P j) ((P k) r)) k) ((P 10) ((P 20) 30))) 
=> 20 

+ ((/. ((P j) ((P k) r)) r) ((P 10) ((P 20) 30))) 
=> 30 

+ ((/. ((P ((P j) jj)) q) j) ((P ((P 10) 100)) 20)) 
=> 10 

+ ((/. ((P ((P j) jj)) q) jj) ((P ((P 10) 100)) 20)) 
=> 100 

+ ((/. ((P ((P j) jj)) q) q) ((P ((P 10) 100)) 20)) 
=> 20 

+ ((/. x x) 1) 
=> 1 

+ ((/. x (x 2)) (/. x x)) 
=> 2 

+ (/. r r) 
=> ($ (/. b271 ((/. r r) b271)) ()) 

+ ((/. r r) 3) 
=> 3 

+ ((+ 10) 20) 
=> 30 

+ ((+ ((/. x x) 2000)) 3000) 
=> 5000 

+ ((== 30) 30) 
=> True 

+ ((== 30) 40) 
=> False 

+ (((if True) 100) 200) 
=> 100 

+ (((if False) 100) 200) 
=> 200 

+ (tuct 10) 
=> 10 

+ ((+ 20) (tuct 10)) 
=> 30 

+ ((- 40) 15) 
=> 25 

+ ((* 10) 20) 
=> 200 

+ (fact1 10) 
=> 3628800 

+ (((if ((== 0) 3)) True) False) 
=> False 

+ (((if ((== 0) 0)) True) False) 
=> True 

+ ((/. n (((if ((== n) 3)) True) False)) 3) 
=> True 

+ ((/. n (((if ((== n) 3)) True) False)) 0) 
=> False 

+ (((if ((== 0) 0)) ((* 10) 20)) ((* 30) 40)) 
=> 200 

+ (((if ((== 3) 0)) ((* 10) 20)) ((* 30) 40)) 
=> 1200 

+ ((/. n (((if ((== n) 0)) 1) ((* n) ((- n) 1)))) 3) 
=> 6 

+ ((cons 1) 2) 
=> ((P 1) 2) 

+ (car ((cons 1) 2)) 
=> 1 

+ (cdr ((cons 1) 2)) 
=> 2 

+ (pair? ((cons 1) 2)) 
=> True 

+ (pair? (car ((cons 1) 2))) 
=> False 

+ (pair? (cdr ((cons 1) 2))) 
=> False 

+ (ones Nil) 
=> Nil 

+ (ones ((P 1) ((P 2) ((P 3) Nil)))) 
=> ((P ((P 1) 1)) ((P ((P 1) 2)) ((P ((P 1) 3)) Nil))) 

+ (double 10) 
=> 20 

+ ((map double) ((P 1) ((P 2) ((P 3) Nil)))) 
=> ((P 2) ((P 4) ((P 6) Nil))) 

+ ((/. ((P a) b) a) ((P 1) 2)) 
=> 1 

+ (voo ((P 1) ((P 2) 3))) 
=> 5 

+ (/. x x) 
=> ($ (/. b296 ((/. x x) b296)) ()) 

+ ((/. x x) 1) 
=> 1 

+ ((/. ((P a) b) 1) ((P 10) 20)) 
=> 1 

+ ((/. ((P a) b) a) ((P 10) 20)) 
=> 10 

+ ((/. ((P a) b) b) ((P 10) 20)) 
=> 20 

+ ((/. ((P a) b) ((+ a) b)) ((P 10) 20)) 
=> 30 

+ (voo2 ((P double) ((P 1) Nil))) 
=> ((P 20) Nil) 

+ (voo2 ((P double) Nil)) 
=> Nil 

+ ((/. ((P f) ((P a) b)) b) ((P 1000) ((P 1) 2))) 
=> 2 

+ ((/. ((P a) b) a) ((P 1) 2)) 
=> 1 

+ (map2 ((P double) ((P 1) ((P 2) ((P 3) Nil))))) 
=> ((P 2) ((P 4) ((P 6) Nil))) 

+ ((/. 1 2) 1) 
=> 2 

+ ((/./. (/. 1 100) (/. 2 200)) 1) 
=> 100 

+ ((/./. (/. 1 100) (/. 2 200)) 2) 
=> 200 

+ ((/. 'Nil 1) 'Nil) 
=> 1 

+ ((/. ((P 1) ((P 2) 'Nil)) 40) ((P 1) ((P 2) 'Nil))) 
=> 40 

+ ((/. ((P a) ((P b) 'Nil)) ((+ a) b)) ((P 1) ((P 2) 'Nil))) 
=> 3 

+ 1 
=> 1 

+ (/. x x) 
=> ($ (/. b400 ((/. x x) b400)) ()) 

+ ((/. x x) 1) 
=> 1 

+ ((/. y ((/. x x) y)) 2) 
=> 2 

+ (/. ((P a) b) a) 
=> ($ (/. b412 (((if (pair? b412)) ((/. b (car b412)) (cdr b412))) TOPFAIL)) ()) 

+ ((/. ((P a) b) a) ((P 1) 2)) 
=> 1 

+ ((/. ((P a) b) b) ((P 1) 2)) 
=> 2 

