+ ((/. x x) 1) 
- (I 1) 
=> 1 

+ ((/. x (x 2)) (/. x x)) 
- (((S I) (K 2)) I) 
=> 2 

+ (/. r r) 
- I 
=> I 

+ ((/. r r) 3) 
- (I 3) 
=> 3 

+ ((+ 10) 20) 
- ((+ 10) 20) 
=> 30 

+ ((+ ((/. x x) 2000)) 3000) 
- ((+ (I 2000)) 3000) 
=> 5000 

+ ((== 30) 30) 
- ((== 30) 30) 
=> True 

+ ((== 30) 40) 
- ((== 30) 40) 
=> False 

+ (((if True) 100) 200) 
- (((if True) 100) 200) 
=> 100 

+ (((if False) 100) 200) 
- (((if False) 100) 200) 
=> 200 

+ (tuct 10) 
- (tuct 10) 
=> 10 

+ ((+ 20) (tuct 10)) 
- ((+ 20) (tuct 10)) 
=> 30 

+ ((+ 20) (tuct 10)) 
- ((+ 20) (tuct 10)) 
=> 30 

+ ((- 40) 15) 
- ((- 40) 15) 
=> 25 

+ ((- 40) 15) 
- ((- 40) 15) 
=> 25 

+ ((* 10) 20) 
- ((* 10) 20) 
=> 200 

+ ((* 10) 20) 
- ((* 10) 20) 
=> 200 

+ (fact1 10) 
- (fact1 10) 
=> 3628800 

+ (((if ((== 0) 3)) True) False) 
- (((if ((== 0) 3)) True) False) 
=> False 

+ (((if ((== 0) 0)) True) False) 
- (((if ((== 0) 0)) True) False) 
=> True 

+ ((/. n (((if ((== n) 3)) True) False)) 3) 
- (((S ((S ((S (K if)) ((S ((S (K ==)) I)) (K 3)))) (K True))) (K False)) 3) 
=> True 

+ ((/. n (((if ((== n) 3)) True) False)) 0) 
- (((S ((S ((S (K if)) ((S ((S (K ==)) I)) (K 3)))) (K True))) (K False)) 0) 
=> False 

+ (((if ((== 0) 0)) ((* 10) 20)) ((* 30) 40)) 
- (((if ((== 0) 0)) ((* 10) 20)) ((* 30) 40)) 
=> 200 

+ (((if ((== 3) 0)) ((* 10) 20)) ((* 30) 40)) 
- (((if ((== 3) 0)) ((* 10) 20)) ((* 30) 40)) 
=> 1200 

+ ((/. n (((if ((== n) 0)) 1) ((* n) ((- n) 1)))) 3) 
- (((S ((S ((S (K if)) ((S ((S (K ==)) I)) (K 0)))) (K 1))) ((S ((S (K *)) I)) ((S ((S (K -)) I)) (K 1)))) 3) 
=> 6 

+ ((cons 1) 2) 
- ((cons 1) 2) 
=> ((P 1) 2) 

+ (car ((cons 1) 2)) 
- (car ((cons 1) 2)) 
=> 1 

+ (cdr ((cons 1) 2)) 
- (cdr ((cons 1) 2)) 
=> 2 

+ ((cons 1) 2) 
- ((cons 1) 2) 
=> ((P 1) 2) 

+ (car ((cons 1) 2)) 
- (car ((cons 1) 2)) 
=> 1 

+ (cdr ((cons 1) 2)) 
- (cdr ((cons 1) 2)) 
=> 2 

+ (pair? ((cons 1) 2)) 
- (pair? ((cons 1) 2)) 
=> True 

+ (pair? (car ((cons 1) 2))) 
- (pair? (car ((cons 1) 2))) 
=> False 

+ (pair? (cdr ((cons 1) 2))) 
- (pair? (cdr ((cons 1) 2))) 
=> False 

+ (pair? ((cons 1) 2)) 
- (pair? ((cons 1) 2)) 
=> True 

+ (pair? (car ((cons 1) 2))) 
- (pair? (car ((cons 1) 2))) 
=> False 

+ (pair? (cdr ((cons 1) 2))) 
- (pair? (cdr ((cons 1) 2))) 
=> False 

+ (ones ((P 1) ((P 2) ((P 3) Nil)))) 
- (ones ((P 1) ((P 2) ((P 3) Nil)))) 
=> ((P 1) ((P 2) ((P 3) Nil))) 

+ (double 10) 
- (double 10) 
=> I 

+ ((map double) ((P 1) ((P 2) ((P 3) Nil)))) 
- ((map double) ((P 1) ((P 2) ((P 3) Nil)))) 
=> I 

+ ((/. a25 (((if (pair? a25)) (((/. a (/. b a)) (car a25)) (cdr a25))) ((/. x FAIL) a25))) ((P 1) 2)) 
- (((S ((S ((S (K if)) ((S (K pair?)) I))) ((S ((S ((S ((S (K S)) ((S (K K)) (K K)))) (K I))) ((S (K car)) I))) ((S (K cdr)) I)))) ((S ((S (K K)) (K FAIL))) I)) ((P 1) 2)) 
=> 1 

+ (voo ((P 1) ((P 2) 3))) 
- (voo ((P 1) ((P 2) 3))) 
=> 5 

+ (/. x x) 
- I 
=> I 

+ ((/. x x) 1) 
- (I 1) 
=> 1 

+ ((/. a30 (((if (pair? a30)) (((/. a (/. b 1)) (car a30)) (cdr a30))) ((/. x FAIL) a30))) ((P 10) 20)) 
- (((S ((S ((S (K if)) ((S (K pair?)) I))) ((S ((S ((S ((S (K S)) ((S (K K)) (K K)))) ((S (K K)) (K 1)))) ((S (K car)) I))) ((S (K cdr)) I)))) ((S ((S (K K)) (K FAIL))) I)) ((P 10) 20)) 
=> 1 

+ ((/. a33 (((if (pair? a33)) (((/. a (/. b a)) (car a33)) (cdr a33))) ((/. x FAIL) a33))) ((P 10) 20)) 
- (((S ((S ((S (K if)) ((S (K pair?)) I))) ((S ((S ((S ((S (K S)) ((S (K K)) (K K)))) (K I))) ((S (K car)) I))) ((S (K cdr)) I)))) ((S ((S (K K)) (K FAIL))) I)) ((P 10) 20)) 
=> 10 

+ ((/. a36 (((if (pair? a36)) (((/. a (/. b b)) (car a36)) (cdr a36))) ((/. x FAIL) a36))) ((P 10) 20)) 
- (((S ((S ((S (K if)) ((S (K pair?)) I))) ((S ((S ((S (K K)) (K I))) ((S (K car)) I))) ((S (K cdr)) I)))) ((S ((S (K K)) (K FAIL))) I)) ((P 10) 20)) 
=> 20 

+ ((/. a39 (((if (pair? a39)) (((/. a (/. b ((+ a) b))) (car a39)) (cdr a39))) ((/. x FAIL) a39))) ((P 10) 20)) 
- (((S ((S ((S (K if)) ((S (K pair?)) I))) ((S ((S ((S ((S (K S)) ((S ((S (K S)) ((S (K K)) (K S)))) ((S ((S (K S)) ((S ((S (K S)) ((S (K K)) (K S)))) ((S ((S (K S)) ((S (K K)) (K K)))) ((S (K K)) (K +)))))) ((S ((S (K S)) ((S (K K)) (K K)))) (K I)))))) ((S (K K)) (K I)))) ((S (K car)) I))) ((S (K cdr)) I)))) ((S ((S (K K)) (K FAIL))) I)) ((P 10) 20)) 
=> 30 

