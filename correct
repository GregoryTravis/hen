(/. (P x joe) x)
(/. (P x (P y (P z q))) x)
(f 1)
(f (P 1 2))
(f (P 1 (P 2 3)))
(/. (P a (P b c)) (+ (P a (P c Nil))))
(ulp (P 1 (P 2 3)))
((/. (P a (P b c)) ((+ a) c)) (P 1 (P 2 3)))
((/. (P a (P b (P c Nil))) ((+ a) c)) (P 1 (P 2 (P 3 Nil))))
(/. x x)
(/. a (/. b a))
(/. a (/. b (/. c a)))
(/. a (/. aa (/. b (/. c a))))
(/.
 k2
 (/.
  d1
  (/.
   rec0
   (((if (pair? d1))
     ((((/. k5 (/. d4 (/. rec3 (k5 (rec3 d4)))))
        (((/. k8 (/. d7 (/. rec6 (k8 (rec6 d7))))) k2) (cdr d1)))
       (car d1))
      rec0))
    (/. j (/. k j))))))
(/.
 b9
 ((((/. k12 (/. d11 (/. rec10 (k12 (rec10 d11))))) (/. x x)) b9) (/. x x)))
(/.
 b13
 ((((/.
     k16
     (/.
      d15
      (/.
       rec14
       (((if (pair? d15))
         ((((/. k19 (/. d18 (/. rec17 (k19 (rec17 d18)))))
            (((/. k22 (/. d21 (/. rec20 (k22 (rec20 d21))))) k16) (cdr d15)))
           (car d15))
          rec14))
        TOPFAIL))))
    (/. x x))
   b13)
  (/. a (/. b a))))
(/.
 b23
 ((((/.
     k26
     (/.
      d25
      (/.
       rec24
       (((if (pair? d25))
         ((((/. k29 (/. d28 (/. rec27 (k29 (rec27 d28)))))
            (((/.
               k32
               (/.
                d31
                (/.
                 rec30
                 (((if (pair? d31))
                   ((((/. k35 (/. d34 (/. rec33 (k35 (rec33 d34)))))
                      (((/. k38 (/. d37 (/. rec36 (k38 (rec36 d37))))) k32)
                       (cdr d31)))
                     (car d31))
                    rec30))
                  TOPFAIL))))
              k26)
             (cdr d25)))
           (car d25))
          rec24))
        TOPFAIL))))
    (/. x x))
   b23)
  (/. a (/. b (/. c a)))))
(/.
 b39
 ((((/.
     k42
     (/.
      d41
      (/.
       rec40
       (((if (pair? d41))
         ((((/.
             k45
             (/.
              d44
              (/.
               rec43
               (((if (pair? d44))
                 ((((/. k48 (/. d47 (/. rec46 (k48 (rec46 d47)))))
                    (((/. k51 (/. d50 (/. rec49 (k51 (rec49 d50))))) k45)
                     (cdr d44)))
                   (car d44))
                  rec43))
                TOPFAIL))))
            (((/.
               k54
               (/.
                d53
                (/.
                 rec52
                 (((if (pair? d53))
                   ((((/. k57 (/. d56 (/. rec55 (k57 (rec55 d56)))))
                      (((/. k60 (/. d59 (/. rec58 (k60 (rec58 d59))))) k54)
                       (cdr d53)))
                     (car d53))
                    rec52))
                  TOPFAIL))))
              k42)
             (cdr d41)))
           (car d41))
          rec40))
        TOPFAIL))))
    (/. x x))
   b39)
  (/. a (/. aa (/. b (/. c a))))))
(/.
 b61
 ((((/.
     k64
     (/.
      d63
      (/.
       rec62
       (((if (pair? d63))
         ((((/. k67 (/. d66 (/. rec65 (k67 (rec65 d66)))))
            (((/. k70 (/. d69 (/. rec68 (k70 (rec68 d69))))) k64) (cdr d63)))
           (car d63))
          rec62))
        TOPFAIL))))
    (/. x x))
   b61)
  (/. j (/. k j))))
+ ((/. b71 ((((/. k74 (/. d73 (/. rec72 (((if (pair? d73)) ((((/. k77 (/. d76 (/. rec75 (k77 (rec75 d76))))) (((/. k80 (/. d79 (/. rec78 (k80 (rec78 d79))))) k74) (cdr d73))) (car d73)) rec72)) TOPFAIL)))) (/. x x)) b71) (/. j (/. k j)))) (P 10 20)) 
=> 10 

+ ((/. b133 ((((/. k136 (/. d135 (/. rec134 (((if (pair? d135)) ((((/. k139 (/. d138 (/. rec137 (k139 (rec137 d138))))) (((/. k142 (/. d141 (/. rec140 (k142 (rec140 d141))))) k136) (cdr d135))) (car d135)) rec134)) TOPFAIL)))) (/. x x)) b133) (/. j (/. k k)))) (P 10 20)) 
=> 20 

+ ((/. b195 ((((/. k198 (/. d197 (/. rec196 (((if (pair? d197)) ((((/. k201 (/. d200 (/. rec199 (((if (pair? d200)) ((((/. k204 (/. d203 (/. rec202 (k204 (rec202 d203))))) (((/. k207 (/. d206 (/. rec205 (k207 (rec205 d206))))) k201) (cdr d200))) (car d200)) rec199)) TOPFAIL)))) (((/. k210 (/. d209 (/. rec208 (((if (pair? d209)) ((((/. k213 (/. d212 (/. rec211 (k213 (rec211 d212))))) (((/. k216 (/. d215 (/. rec214 (k216 (rec214 d215))))) k210) (cdr d209))) (car d209)) rec208)) TOPFAIL)))) k198) (cdr d197))) (car d197)) rec196)) TOPFAIL)))) (/. x x)) b195) (/. j (/. jj (/. k (/. r j)))))) (P (P 10 100) (P 20 30))) 
=> 10 

+ ((/. b325 ((((/. k328 (/. d327 (/. rec326 (((if (pair? d327)) ((((/. k331 (/. d330 (/. rec329 (((if (pair? d330)) ((((/. k334 (/. d333 (/. rec332 (k334 (rec332 d333))))) (((/. k337 (/. d336 (/. rec335 (k337 (rec335 d336))))) k331) (cdr d330))) (car d330)) rec329)) TOPFAIL)))) (((/. k340 (/. d339 (/. rec338 (((if (pair? d339)) ((((/. k343 (/. d342 (/. rec341 (k343 (rec341 d342))))) (((/. k346 (/. d345 (/. rec344 (k346 (rec344 d345))))) k340) (cdr d339))) (car d339)) rec338)) TOPFAIL)))) k328) (cdr d327))) (car d327)) rec326)) TOPFAIL)))) (/. x x)) b325) (/. j (/. jj (/. k (/. r jj)))))) (P (P 10 100) (P 20 30))) 
=> 100 

+ ((/. b455 ((((/. k458 (/. d457 (/. rec456 (((if (pair? d457)) ((((/. k461 (/. d460 (/. rec459 (((if (pair? d460)) ((((/. k464 (/. d463 (/. rec462 (k464 (rec462 d463))))) (((/. k467 (/. d466 (/. rec465 (k467 (rec465 d466))))) k461) (cdr d460))) (car d460)) rec459)) TOPFAIL)))) (((/. k470 (/. d469 (/. rec468 (((if (pair? d469)) ((((/. k473 (/. d472 (/. rec471 (k473 (rec471 d472))))) (((/. k476 (/. d475 (/. rec474 (k476 (rec474 d475))))) k470) (cdr d469))) (car d469)) rec468)) TOPFAIL)))) k458) (cdr d457))) (car d457)) rec456)) TOPFAIL)))) (/. x x)) b455) (/. j (/. jj (/. k (/. r k)))))) (P (P 10 100) (P 20 30))) 
=> 20 

+ ((/. b585 ((((/. k588 (/. d587 (/. rec586 (((if (pair? d587)) ((((/. k591 (/. d590 (/. rec589 (((if (pair? d590)) ((((/. k594 (/. d593 (/. rec592 (k594 (rec592 d593))))) (((/. k597 (/. d596 (/. rec595 (k597 (rec595 d596))))) k591) (cdr d590))) (car d590)) rec589)) TOPFAIL)))) (((/. k600 (/. d599 (/. rec598 (((if (pair? d599)) ((((/. k603 (/. d602 (/. rec601 (k603 (rec601 d602))))) (((/. k606 (/. d605 (/. rec604 (k606 (rec604 d605))))) k600) (cdr d599))) (car d599)) rec598)) TOPFAIL)))) k588) (cdr d587))) (car d587)) rec586)) TOPFAIL)))) (/. x x)) b585) (/. j (/. jj (/. k (/. r r)))))) (P (P 10 100) (P 20 30))) 
=> 30 

+ ((/. b715 ((((/. k718 (/. d717 (/. rec716 (((if (pair? d717)) ((((/. k721 (/. d720 (/. rec719 (k721 (rec719 d720))))) (((/. k724 (/. d723 (/. rec722 (((if (pair? d723)) ((((/. k727 (/. d726 (/. rec725 (k727 (rec725 d726))))) (((/. k730 (/. d729 (/. rec728 (k730 (rec728 d729))))) k724) (cdr d723))) (car d723)) rec722)) TOPFAIL)))) k718) (cdr d717))) (car d717)) rec716)) TOPFAIL)))) (/. x x)) b715) (/. j (/. k (/. r j))))) (P 10 (P 20 30))) 
=> 10 

+ ((/. b811 ((((/. k814 (/. d813 (/. rec812 (((if (pair? d813)) ((((/. k817 (/. d816 (/. rec815 (k817 (rec815 d816))))) (((/. k820 (/. d819 (/. rec818 (((if (pair? d819)) ((((/. k823 (/. d822 (/. rec821 (k823 (rec821 d822))))) (((/. k826 (/. d825 (/. rec824 (k826 (rec824 d825))))) k820) (cdr d819))) (car d819)) rec818)) TOPFAIL)))) k814) (cdr d813))) (car d813)) rec812)) TOPFAIL)))) (/. x x)) b811) (/. j (/. k (/. r k))))) (P 10 (P 20 30))) 
=> 20 

+ ((/. b907 ((((/. k910 (/. d909 (/. rec908 (((if (pair? d909)) ((((/. k913 (/. d912 (/. rec911 (k913 (rec911 d912))))) (((/. k916 (/. d915 (/. rec914 (((if (pair? d915)) ((((/. k919 (/. d918 (/. rec917 (k919 (rec917 d918))))) (((/. k922 (/. d921 (/. rec920 (k922 (rec920 d921))))) k916) (cdr d915))) (car d915)) rec914)) TOPFAIL)))) k910) (cdr d909))) (car d909)) rec908)) TOPFAIL)))) (/. x x)) b907) (/. j (/. k (/. r r))))) (P 10 (P 20 30))) 
=> 30 

+ ((/. b1003 ((((/. k1006 (/. d1005 (/. rec1004 (((if (pair? d1005)) ((((/. k1009 (/. d1008 (/. rec1007 (((if (pair? d1008)) ((((/. k1012 (/. d1011 (/. rec1010 (k1012 (rec1010 d1011))))) (((/. k1015 (/. d1014 (/. rec1013 (k1015 (rec1013 d1014))))) k1009) (cdr d1008))) (car d1008)) rec1007)) TOPFAIL)))) (((/. k1018 (/. d1017 (/. rec1016 (k1018 (rec1016 d1017))))) k1006) (cdr d1005))) (car d1005)) rec1004)) TOPFAIL)))) (/. x x)) b1003) (/. j (/. jj (/. q j))))) (P (P 10 100) 20)) 
=> 10 

+ ((/. b1099 ((((/. k1102 (/. d1101 (/. rec1100 (((if (pair? d1101)) ((((/. k1105 (/. d1104 (/. rec1103 (((if (pair? d1104)) ((((/. k1108 (/. d1107 (/. rec1106 (k1108 (rec1106 d1107))))) (((/. k1111 (/. d1110 (/. rec1109 (k1111 (rec1109 d1110))))) k1105) (cdr d1104))) (car d1104)) rec1103)) TOPFAIL)))) (((/. k1114 (/. d1113 (/. rec1112 (k1114 (rec1112 d1113))))) k1102) (cdr d1101))) (car d1101)) rec1100)) TOPFAIL)))) (/. x x)) b1099) (/. j (/. jj (/. q jj))))) (P (P 10 100) 20)) 
=> 100 

+ ((/. b1195 ((((/. k1198 (/. d1197 (/. rec1196 (((if (pair? d1197)) ((((/. k1201 (/. d1200 (/. rec1199 (((if (pair? d1200)) ((((/. k1204 (/. d1203 (/. rec1202 (k1204 (rec1202 d1203))))) (((/. k1207 (/. d1206 (/. rec1205 (k1207 (rec1205 d1206))))) k1201) (cdr d1200))) (car d1200)) rec1199)) TOPFAIL)))) (((/. k1210 (/. d1209 (/. rec1208 (k1210 (rec1208 d1209))))) k1198) (cdr d1197))) (car d1197)) rec1196)) TOPFAIL)))) (/. x x)) b1195) (/. j (/. jj (/. q q))))) (P (P 10 100) 20)) 
=> 20 

+ ((/. (P x Nil) x) (P Nil Nil)) 
=> Nil 

+ ((/. (P (P j k) Nil) j) (P (P 10 20) Nil)) 
=> 10 

+ ((/. (P (P j k) Nil) k) (P (P 10 20) Nil)) 
=> 20 

+ ((/. (P (P (P j jj) (P k r)) Nil) j) (P (P (P 10 100) (P 20 30)) Nil)) 
=> 10 

+ ((/. (P (P (P j jj) (P k r)) Nil) jj) (P (P (P 10 100) (P 20 30)) Nil)) 
=> 100 

+ ((/. (P (P (P j jj) (P k r)) Nil) k) (P (P (P 10 100) (P 20 30)) Nil)) 
=> 20 

+ ((/. (P (P (P j jj) (P k r)) Nil) r) (P (P (P 10 100) (P 20 30)) Nil)) 
=> 30 

+ ((/. (P (P j (P k r)) Nil) j) (P (P 10 (P 20 30)) Nil)) 
=> 10 

+ ((/. (P (P j (P k r)) Nil) k) (P (P 10 (P 20 30)) Nil)) 
=> 20 

+ ((/. (P (P j (P k r)) Nil) r) (P (P 10 (P 20 30)) Nil)) 
=> 30 

+ ((/. (P (P (P j jj) q) Nil) j) (P (P (P 10 100) 20) Nil)) 
=> 10 

+ ((/. (P (P (P j jj) q) Nil) jj) (P (P (P 10 100) 20) Nil)) 
=> 100 

+ ((/. (P (P (P j jj) q) Nil) q) (P (P (P 10 100) 20) Nil)) 
=> 20 

+ ((/. (P x Nil) x) (P 1 Nil)) 
=> 1 

+ ((/. (P x Nil) (x (P 2 Nil))) (P (/. x x) Nil)) 
=> (P 2 Nil) 

+ ((/. (P x Nil) (x (P 2 Nil))) (P (/. (P x Nil) x) Nil)) 
=> 2 

+ (/. (P r Nil) r) 
=> ($ (/. b1823 (((if (pair? b1823)) (((if ((== (cdr b1823)) Nil)) (car b1823)) TOPFAIL)) TOPFAIL)) ()) 

+ ((/. (P r Nil) r) (P 3 Nil)) 
=> 3 

+ ((+ 10) 20) 
=> 30 

+ ((+ ((/. (P x Nil) x) (P 2000 Nil))) 3000) 
=> 5000 

+ ((== (P 30 Nil)) (P 30 Nil)) 
=> True 

+ ((== (P 30 Nil)) (P 40 Nil)) 
=> False 

+ (((if True) 100) 200) 
=> 100 

+ (((if False) 100) 200) 
=> 200 

+ (tuct (P 10 Nil)) 
=> 10 

+ ((+ 20) (tuct (P 10 Nil))) 
=> 30 

+ ((- 40) 15) 
=> 25 

+ ((* 10) 20) 
=> 200 

+ (((if ((== (P 0 Nil)) (P 3 Nil))) True) False) 
=> False 

+ (((if ((== (P 0 Nil)) (P 0 Nil))) True) False) 
=> True 

+ ((/. (P n Nil) (((if ((== (P n Nil)) (P 3 Nil))) True) False)) (P 3 Nil)) 
=> False 

+ ((/. (P n Nil) (((if ((== (P n Nil)) (P 3 Nil))) True) False)) (P 0 Nil)) 
=> False 

+ (((if ((== (P 0 Nil)) (P 0 Nil))) ((* 10) 20)) ((* 30) 40)) 
=> 200 

+ (((if ((== (P 3 Nil)) (P 0 Nil))) ((* 10) 20)) ((* 30) 40)) 
=> 1200 

+ ((/. (P n Nil) (((if ((== (P n Nil)) (P 0 Nil))) 1) ((* n) ((- n) 1)))) (P 3 Nil)) 
=> 6 

+ ((cons 1) 2) 
=> (P 1 2) 

+ (car ((cons 1) 2)) 
=> 1 

+ (cdr ((cons 1) 2)) 
=> 2 

+ (pair? (P ((cons 1) 2) Nil)) 
=> True 

+ (pair? (P (car ((cons 1) 2)) Nil)) 
=> True 

+ (pair? (P (cdr ((cons 1) 2)) Nil)) 
=> True 

+ (double (P 10 Nil)) 
=> 20 

+ (ones (P Nil Nil)) 
=> Nil 

+ (ones (P (P 1 Nil) Nil)) 
=> (P (P 1 1) Nil) 

+ (ones (P (P 1 (P 2 (P 3 Nil))) Nil)) 
=> (P (P 1 1) (P (P 1 2) (P (P 1 3) Nil))) 

+ ((map (P double Nil)) (P (P 1 (P 2 (P 3 Nil))) Nil)) 
=> (P 2 (P 4 (P 6 Nil))) 

+ ((map (P double Nil)) (P 1 Nil)) 
=> 1 

+ ((/. (P a b) a) (P 1 2)) 
=> 1 

+ (voo (P 1 (P 2 3))) 
=> 5 

+ (/. x x) 
=> ($ (/. b1893 ((/. x x) b1893)) ()) 

+ ((/. x x) (P 1 Nil)) 
=> (P 1 Nil) 

+ ((/. (P a b) 1) (P 10 20)) 
=> 1 

+ ((/. (P a b) a) (P 10 20)) 
=> 10 

+ ((/. (P a b) b) (P 10 20)) 
=> 20 

+ ((/. (P a b) ((+ a) b)) (P 10 20)) 
=> 30 

+ (voo2 (P double (P 1 Nil))) 
=> (P 20 Nil) 

+ (voo2 (P double Nil)) 
=> Nil 

+ ((/. (P f (P a b)) b) (P 1000 (P 1 2))) 
=> 2 

+ ((/. (P a b) a) (P 1 2)) 
=> 1 

+ (map2 (P double (P (P 1 (P 2 (P 3 Nil))) Nil))) 
=> (P 2 (P 4 (P 6 Nil))) 

+ ((/. 1 2) 1) 
=> 2 

+ ((/. (P 1 Nil) 2) (P 1 Nil)) 
=> 2 

+ ((/./. (/. 1 100) (/. 2 200)) 1) 
=> 100 

+ ((/./. (/. 1 100) (/. 2 200)) 2) 
=> 200 

+ ((/./. (/. (P 1 Nil) 100) (/. (P 2 Nil) 200)) (P 1 Nil)) 
=> 100 

+ ((/./. (/. (P 1 Nil) 100) (/. (P 2 Nil) 200)) (P 2 Nil)) 
=> 200 

+ ((/. (P quote (P Nil Nil)) 1) (P quote (P Nil Nil))) 
=> 1 

+ ((/. (P 'Nil Nil) 1) (P 'Nil Nil)) 
=> 1 

+ ((/. (P 1 (P 2 Nil)) 40) (P 1 (P 2 Nil))) 
=> 40 

+ ((/. (P a (P b Nil)) ((+ a) b)) (P 1 (P 2 Nil))) 
=> 3 

+ 1 
=> 1 

+ (/. x x) 
=> ($ (/. b2119 ((/. x x) b2119)) ()) 

+ ((/. x x) (P 1 Nil)) 
=> (P 1 Nil) 

+ ((/. y ((/. x x) (P y Nil))) (P 2 Nil)) 
=> (P (P 2 Nil) Nil) 

+ (/. (P a b) a) 
=> ($ (/. b2135 (((if (pair? b2135)) ((/. b (car b2135)) (cdr b2135))) TOPFAIL)) ()) 

+ ((/. (P a b) a) (P 1 2)) 
=> 1 

+ ((/. (P a b) b) (P 1 2)) 
=> 2 

