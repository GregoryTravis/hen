(/. ((P x) joe) x)
(/. ((P x) ((P y) ((P z) q))) x)
(f 1)
(f ((P 1) 2))
(f ((P 1) ((P 2) 3)))
(/. ((P a) ((P b) c)) (+ ((P a) ((P c) Nil))))
(ulp ((P 1) ((P 2) 3)))
((/. ((P a) ((P b) c)) ((+ a) c)) ((P 1) ((P 2) 3)))
((/. ((P a) ((P b) ((P c) Nil))) ((+ a) c)) ((P 1) ((P 2) ((P 3) Nil))))
(/. x x)
(/. a (/. b a))
(/. a (/. b (/. c a)))
(/. a (/. aa (/. b (/. c a))))
(/.
 d1
 (/.
  rec0
  (((if (pair? d1))
    (((/. d5 (/. rec4 (rec4 d5))) (cdr d1))
     (((/. d3 (/. rec2 (rec2 d3))) (car d1)) rec0)))
   (/. j (/. k j)))))
(/. b6 (((/. d8 (/. rec7 (rec7 d8))) b6) (/. x x)))
(/.
 b9
 (((/.
    d11
    (/.
     rec10
     (((if (pair? d11))
       (((/. d15 (/. rec14 (rec14 d15))) (cdr d11))
        (((/. d13 (/. rec12 (rec12 d13))) (car d11)) rec10)))
      TOPFAIL)))
   b9)
  (/. a (/. b a))))
(/.
 b16
 (((/.
    d18
    (/.
     rec17
     (((if (pair? d18))
       (((/.
          d22
          (/.
           rec21
           (((if (pair? d22))
             (((/. d26 (/. rec25 (rec25 d26))) (cdr d22))
              (((/. d24 (/. rec23 (rec23 d24))) (car d22)) rec21)))
            TOPFAIL)))
         (cdr d18))
        (((/. d20 (/. rec19 (rec19 d20))) (car d18)) rec17)))
      TOPFAIL)))
   b16)
  (/. a (/. b (/. c a)))))
(/.
 b27
 (((/.
    d29
    (/.
     rec28
     (((if (pair? d29))
       (((/.
          d37
          (/.
           rec36
           (((if (pair? d37))
             (((/. d41 (/. rec40 (rec40 d41))) (cdr d37))
              (((/. d39 (/. rec38 (rec38 d39))) (car d37)) rec36)))
            TOPFAIL)))
         (cdr d29))
        (((/.
           d31
           (/.
            rec30
            (((if (pair? d31))
              (((/. d35 (/. rec34 (rec34 d35))) (cdr d31))
               (((/. d33 (/. rec32 (rec32 d33))) (car d31)) rec30)))
             TOPFAIL)))
          (car d29))
         rec28)))
      TOPFAIL)))
   b27)
  (/. a (/. aa (/. b (/. c a))))))
(/.
 b42
 (((/.
    d44
    (/.
     rec43
     (((if (pair? d44))
       (((/. d48 (/. rec47 (rec47 d48))) (cdr d44))
        (((/. d46 (/. rec45 (rec45 d46))) (car d44)) rec43)))
      TOPFAIL)))
   b42)
  (/. j (/. k j))))
+ ((/. b49 (((/. d51 (/. rec50 (((if (pair? d51)) (((/. d55 (/. rec54 (rec54 d55))) (cdr d51)) (((/. d53 (/. rec52 (rec52 d53))) (car d51)) rec50))) TOPFAIL))) b49) (/. j (/. k j)))) ((P 10) 20)) 
=> 10 

+ ((/. b83 (((/. d85 (/. rec84 (((if (pair? d85)) (((/. d89 (/. rec88 (rec88 d89))) (cdr d85)) (((/. d87 (/. rec86 (rec86 d87))) (car d85)) rec84))) TOPFAIL))) b83) (/. j (/. k k)))) ((P 10) 20)) 
=> 20 

+ ((/. b117 (((/. d119 (/. rec118 (((if (pair? d119)) (((/. d127 (/. rec126 (((if (pair? d127)) (((/. d131 (/. rec130 (rec130 d131))) (cdr d127)) (((/. d129 (/. rec128 (rec128 d129))) (car d127)) rec126))) TOPFAIL))) (cdr d119)) (((/. d121 (/. rec120 (((if (pair? d121)) (((/. d125 (/. rec124 (rec124 d125))) (cdr d121)) (((/. d123 (/. rec122 (rec122 d123))) (car d121)) rec120))) TOPFAIL))) (car d119)) rec118))) TOPFAIL))) b117) (/. j (/. jj (/. k (/. r j)))))) ((P ((P 10) 100)) ((P 20) 30))) 
=> 10 

+ ((/. b189 (((/. d191 (/. rec190 (((if (pair? d191)) (((/. d199 (/. rec198 (((if (pair? d199)) (((/. d203 (/. rec202 (rec202 d203))) (cdr d199)) (((/. d201 (/. rec200 (rec200 d201))) (car d199)) rec198))) TOPFAIL))) (cdr d191)) (((/. d193 (/. rec192 (((if (pair? d193)) (((/. d197 (/. rec196 (rec196 d197))) (cdr d193)) (((/. d195 (/. rec194 (rec194 d195))) (car d193)) rec192))) TOPFAIL))) (car d191)) rec190))) TOPFAIL))) b189) (/. j (/. jj (/. k (/. r jj)))))) ((P ((P 10) 100)) ((P 20) 30))) 
=> 100 

+ ((/. b261 (((/. d263 (/. rec262 (((if (pair? d263)) (((/. d271 (/. rec270 (((if (pair? d271)) (((/. d275 (/. rec274 (rec274 d275))) (cdr d271)) (((/. d273 (/. rec272 (rec272 d273))) (car d271)) rec270))) TOPFAIL))) (cdr d263)) (((/. d265 (/. rec264 (((if (pair? d265)) (((/. d269 (/. rec268 (rec268 d269))) (cdr d265)) (((/. d267 (/. rec266 (rec266 d267))) (car d265)) rec264))) TOPFAIL))) (car d263)) rec262))) TOPFAIL))) b261) (/. j (/. jj (/. k (/. r k)))))) ((P ((P 10) 100)) ((P 20) 30))) 
=> 20 

+ ((/. b333 (((/. d335 (/. rec334 (((if (pair? d335)) (((/. d343 (/. rec342 (((if (pair? d343)) (((/. d347 (/. rec346 (rec346 d347))) (cdr d343)) (((/. d345 (/. rec344 (rec344 d345))) (car d343)) rec342))) TOPFAIL))) (cdr d335)) (((/. d337 (/. rec336 (((if (pair? d337)) (((/. d341 (/. rec340 (rec340 d341))) (cdr d337)) (((/. d339 (/. rec338 (rec338 d339))) (car d337)) rec336))) TOPFAIL))) (car d335)) rec334))) TOPFAIL))) b333) (/. j (/. jj (/. k (/. r r)))))) ((P ((P 10) 100)) ((P 20) 30))) 
=> 30 

+ ((/. b405 (((/. d407 (/. rec406 (((if (pair? d407)) (((/. d411 (/. rec410 (((if (pair? d411)) (((/. d415 (/. rec414 (rec414 d415))) (cdr d411)) (((/. d413 (/. rec412 (rec412 d413))) (car d411)) rec410))) TOPFAIL))) (cdr d407)) (((/. d409 (/. rec408 (rec408 d409))) (car d407)) rec406))) TOPFAIL))) b405) (/. j (/. k (/. r j))))) ((P 10) ((P 20) 30))) 
=> 10 

+ ((/. b458 (((/. d460 (/. rec459 (((if (pair? d460)) (((/. d464 (/. rec463 (((if (pair? d464)) (((/. d468 (/. rec467 (rec467 d468))) (cdr d464)) (((/. d466 (/. rec465 (rec465 d466))) (car d464)) rec463))) TOPFAIL))) (cdr d460)) (((/. d462 (/. rec461 (rec461 d462))) (car d460)) rec459))) TOPFAIL))) b458) (/. j (/. k (/. r k))))) ((P 10) ((P 20) 30))) 
=> 20 

+ ((/. b511 (((/. d513 (/. rec512 (((if (pair? d513)) (((/. d517 (/. rec516 (((if (pair? d517)) (((/. d521 (/. rec520 (rec520 d521))) (cdr d517)) (((/. d519 (/. rec518 (rec518 d519))) (car d517)) rec516))) TOPFAIL))) (cdr d513)) (((/. d515 (/. rec514 (rec514 d515))) (car d513)) rec512))) TOPFAIL))) b511) (/. j (/. k (/. r r))))) ((P 10) ((P 20) 30))) 
=> 30 

+ ((/. b564 (((/. d566 (/. rec565 (((if (pair? d566)) (((/. d574 (/. rec573 (rec573 d574))) (cdr d566)) (((/. d568 (/. rec567 (((if (pair? d568)) (((/. d572 (/. rec571 (rec571 d572))) (cdr d568)) (((/. d570 (/. rec569 (rec569 d570))) (car d568)) rec567))) TOPFAIL))) (car d566)) rec565))) TOPFAIL))) b564) (/. j (/. jj (/. q j))))) ((P ((P 10) 100)) 20)) 
=> 10 

+ ((/. b617 (((/. d619 (/. rec618 (((if (pair? d619)) (((/. d627 (/. rec626 (rec626 d627))) (cdr d619)) (((/. d621 (/. rec620 (((if (pair? d621)) (((/. d625 (/. rec624 (rec624 d625))) (cdr d621)) (((/. d623 (/. rec622 (rec622 d623))) (car d621)) rec620))) TOPFAIL))) (car d619)) rec618))) TOPFAIL))) b617) (/. j (/. jj (/. q jj))))) ((P ((P 10) 100)) 20)) 
=> 100 

+ ((/. b670 (((/. d672 (/. rec671 (((if (pair? d672)) (((/. d680 (/. rec679 (rec679 d680))) (cdr d672)) (((/. d674 (/. rec673 (((if (pair? d674)) (((/. d678 (/. rec677 (rec677 d678))) (cdr d674)) (((/. d676 (/. rec675 (rec675 d676))) (car d674)) rec673))) TOPFAIL))) (car d672)) rec671))) TOPFAIL))) b670) (/. j (/. jj (/. q q))))) ((P ((P 10) 100)) 20)) 
=> 20 

+ ((/. ((P j) k) j) ((P 10) 20)) 
=> 10 

+ ((/. ((P j) k) k) ((P 10) 20)) 
=> 20 

+ ((/. ((P ((P j) jj)) ((P k) r)) j) ((P ((P 10) 100)) ((P 20) 30))) 
=> 10 

+ ((/. ((P ((P j) jj)) ((P k) r)) jj) ((P ((P 10) 100)) ((P 20) 30))) 
=> 100 

+ ((/. ((P ((P j) jj)) ((P k) r)) k) ((P ((P 10) 100)) ((P 20) 30))) 
=> 20 

+ ((/. ((P ((P j) jj)) ((P k) r)) r) ((P ((P 10) 100)) ((P 20) 30))) 
=> 30 

+ ((/. ((P j) ((P k) r)) j) ((P 10) ((P 20) 30))) 
=> 10 

+ ((/. ((P j) ((P k) r)) k) ((P 10) ((P 20) 30))) 
=> 20 

+ ((/. ((P j) ((P k) r)) r) ((P 10) ((P 20) 30))) 
=> 30 

+ ((/. ((P ((P j) jj)) q) j) ((P ((P 10) 100)) 20)) 
=> 10 

+ ((/. ((P ((P j) jj)) q) jj) ((P ((P 10) 100)) 20)) 
=> 100 

+ ((/. ((P ((P j) jj)) q) q) ((P ((P 10) 100)) 20)) 
=> 20 

+ ((/. x x) 1) 
=> 1 

+ ((/. x (x 2)) (/. x x)) 
=> 2 

+ (/. r r) 
=> ($ (/. b994 ((/. r r) b994)) ()) 

+ ((/. r r) 3) 
=> 3 

+ ((+ 10) 20) 
=> 30 

+ ((+ ((/. x x) 2000)) 3000) 
=> 5000 

+ ((== 30) 30) 
=> True 

+ ((== 30) 40) 
=> False 

+ (((if True) 100) 200) 
=> 100 

+ (((if False) 100) 200) 
=> 200 

+ (tuct 10) 
=> 10 

+ ((+ 20) (tuct 10)) 
=> 30 

+ ((- 40) 15) 
=> 25 

+ ((* 10) 20) 
=> 200 

+ (fact1 10) 
=> 3628800 

+ (((if ((== 0) 3)) True) False) 
=> False 

+ (((if ((== 0) 0)) True) False) 
=> True 

+ ((/. n (((if ((== n) 3)) True) False)) 3) 
=> True 

+ ((/. n (((if ((== n) 3)) True) False)) 0) 
=> False 

+ (((if ((== 0) 0)) ((* 10) 20)) ((* 30) 40)) 
=> 200 

+ (((if ((== 3) 0)) ((* 10) 20)) ((* 30) 40)) 
=> 1200 

+ ((/. n (((if ((== n) 0)) 1) ((* n) ((- n) 1)))) 3) 
=> 6 

+ ((cons 1) 2) 
=> ((P 1) 2) 

+ (car ((cons 1) 2)) 
=> 1 

+ (cdr ((cons 1) 2)) 
=> 2 

+ (pair? ((cons 1) 2)) 
=> True 

+ (pair? (car ((cons 1) 2))) 
=> False 

+ (pair? (cdr ((cons 1) 2))) 
=> False 

+ (ones Nil) 
=> Nil 

+ (ones ((P 1) ((P 2) ((P 3) Nil)))) 
=> ((P ((P 1) 1)) ((P ((P 1) 2)) ((P ((P 1) 3)) Nil))) 

+ (double 10) 
=> 20 

+ ((map double) ((P 1) ((P 2) ((P 3) Nil)))) 
=> ((P 2) ((P 4) ((P 6) Nil))) 

+ ((/. ((P a) b) a) ((P 1) 2)) 
=> 1 

+ (voo ((P 1) ((P 2) 3))) 
=> 5 

+ (/. x x) 
=> ($ (/. b1019 ((/. x x) b1019)) ()) 

+ ((/. x x) 1) 
=> 1 

+ ((/. ((P a) b) 1) ((P 10) 20)) 
=> 1 

+ ((/. ((P a) b) a) ((P 10) 20)) 
=> 10 

+ ((/. ((P a) b) b) ((P 10) 20)) 
=> 20 

+ ((/. ((P a) b) ((+ a) b)) ((P 10) 20)) 
=> 30 

+ (voo2 ((P double) ((P 1) Nil))) 
=> ((P 20) Nil) 

+ (voo2 ((P double) Nil)) 
=> Nil 

+ ((/. ((P f) ((P a) b)) b) ((P 1000) ((P 1) 2))) 
=> 2 

+ ((/. ((P a) b) a) ((P 1) 2)) 
=> 1 

+ (map2 ((P double) ((P 1) ((P 2) ((P 3) Nil))))) 
=> ((P 2) ((P 4) ((P 6) Nil))) 

+ ((/. 1 2) 1) 
=> 2 

+ ((/./. (/. 1 100) (/. 2 200)) 1) 
=> 100 

+ ((/./. (/. 1 100) (/. 2 200)) 2) 
=> 200 

+ ((/. 'Nil 1) 'Nil) 
=> 1 

+ ((/. ((P 1) ((P 2) 'Nil)) 40) ((P 1) ((P 2) 'Nil))) 
=> 40 

+ ((/. ((P a) ((P b) 'Nil)) ((+ a) b)) ((P 1) ((P 2) 'Nil))) 
=> 3 

+ 1 
=> 1 

+ (/. x x) 
=> ($ (/. b1123 ((/. x x) b1123)) ()) 

+ ((/. x x) 1) 
=> 1 

+ ((/. y ((/. x x) y)) 2) 
=> 2 

+ (/. ((P a) b) a) 
=> ($ (/. b1135 (((if (pair? b1135)) ((/. b (car b1135)) (cdr b1135))) TOPFAIL)) ()) 

+ ((/. ((P a) b) a) ((P 1) 2)) 
=> 1 

+ ((/. ((P a) b) b) ((P 1) 2)) 
=> 2 

