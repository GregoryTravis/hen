+ ((/. (P x Nil) x) (P Nil Nil)) 
=> Nil 

+ ((/. (P (P j k) Nil) j) (P (P 10 20) Nil)) 
=> 10 

+ ((/. (P (P j k) Nil) k) (P (P 10 20) Nil)) 
=> 20 

+ ((/. (P (P (P j jj) (P k r)) Nil) j) (P (P (P 10 100) (P 20 30)) Nil)) 
=> 10 

+ ((/. (P (P (P j jj) (P k r)) Nil) jj) (P (P (P 10 100) (P 20 30)) Nil)) 
=> 100 

+ ((/. (P (P (P j jj) (P k r)) Nil) k) (P (P (P 10 100) (P 20 30)) Nil)) 
=> 20 

+ ((/. (P (P (P j jj) (P k r)) Nil) r) (P (P (P 10 100) (P 20 30)) Nil)) 
=> 30 

+ ((/. (P (P j (P k r)) Nil) j) (P (P 10 (P 20 30)) Nil)) 
=> 10 

+ ((/. (P (P j (P k r)) Nil) k) (P (P 10 (P 20 30)) Nil)) 
=> 20 

+ ((/. (P (P j (P k r)) Nil) r) (P (P 10 (P 20 30)) Nil)) 
=> 30 

+ ((/. (P (P (P j jj) q) Nil) j) (P (P (P 10 100) 20) Nil)) 
=> 10 

+ ((/. (P (P (P j jj) q) Nil) jj) (P (P (P 10 100) 20) Nil)) 
=> 100 

+ ((/. (P (P (P j jj) q) Nil) q) (P (P (P 10 100) 20) Nil)) 
=> 20 

+ ((/. (P x Nil) x) (P 1 Nil)) 
=> 1 

+ ((/. (P x Nil) (x (P 2 Nil))) (P (/. x x) Nil)) 
=> (P 2 Nil) 

+ ((/. (P x Nil) (x (P 2 Nil))) (P (/. (P x Nil) x) Nil)) 
=> 2 

+ (/. (P r Nil) r) 
=> ($ (/. b532 (((if (pair? b532)) (((if ((== (cdr b532)) Nil)) (car b532)) TOPFAIL)) TOPFAIL)) ()) 

+ ((/. (P r Nil) r) (P 3 Nil)) 
=> 3 

+ ((+ 10) 20) 
=> 30 

+ ((+ ((/. (P x Nil) x) (P 2000 Nil))) 3000) 
=> 5000 

+ ((== (P 30 Nil)) (P 30 Nil)) 
=> True 

+ ((== (P 30 Nil)) (P 40 Nil)) 
=> False 

+ (((if True) 100) 200) 
=> 100 

+ (((if False) 100) 200) 
=> 200 

+ (tuct (P 10 Nil)) 
=> 10 

+ ((+ 20) (tuct (P 10 Nil))) 
=> 30 

+ ((- 40) 15) 
=> 25 

+ ((* 10) 20) 
=> 200 

+ (((if ((== (P 0 Nil)) (P 3 Nil))) True) False) 
=> False 

+ (((if ((== (P 0 Nil)) (P 0 Nil))) True) False) 
=> True 

+ ((/. (P n Nil) (((if ((== (P n Nil)) (P 3 Nil))) True) False)) (P 3 Nil)) 
=> False 

+ ((/. (P n Nil) (((if ((== (P n Nil)) (P 3 Nil))) True) False)) (P 0 Nil)) 
=> False 

+ (((if ((== (P 0 Nil)) (P 0 Nil))) ((* 10) 20)) ((* 30) 40)) 
=> 200 

+ (((if ((== (P 3 Nil)) (P 0 Nil))) ((* 10) 20)) ((* 30) 40)) 
=> 1200 

+ ((/. (P n Nil) (((if ((== (P n Nil)) (P 0 Nil))) 1) ((* n) ((- n) 1)))) (P 3 Nil)) 
=> 6 

+ ((cons 1) 2) 
=> (P 1 2) 

+ (car ((cons 1) 2)) 
=> 1 

+ (cdr ((cons 1) 2)) 
=> 2 

+ (pair? (P ((cons 1) 2) Nil)) 
=> True 

+ (pair? (P (car ((cons 1) 2)) Nil)) 
=> True 

+ (pair? (P (cdr ((cons 1) 2)) Nil)) 
=> True 

+ (double (P 10 Nil)) 
=> 20 

+ (ones (P Nil Nil)) 
=> Nil 

+ (ones (P (P 1 Nil) Nil)) 
=> (P (P 1 1) Nil) 

+ (ones (P (P 1 (P 2 (P 3 Nil))) Nil)) 
=> (P (P 1 1) (P (P 1 2) (P (P 1 3) Nil))) 

+ ((map (P double Nil)) (P (P 1 (P 2 (P 3 Nil))) Nil)) 
=> (P 2 (P 4 (P 6 Nil))) 

+ ((map (P double Nil)) (P 1 Nil)) 
=> 1 

+ ((/. (P a b) a) (P 1 2)) 
=> 1 

+ (voo (P 1 (P 2 3))) 
=> 5 

+ (/. x x) 
=> ($ (/. b602 ((/. x x) b602)) ()) 

+ ((/. x x) (P 1 Nil)) 
=> (P 1 Nil) 

+ ((/. (P a b) 1) (P 10 20)) 
=> 1 

+ ((/. (P a b) a) (P 10 20)) 
=> 10 

+ ((/. (P a b) b) (P 10 20)) 
=> 20 

+ ((/. (P a b) ((+ a) b)) (P 10 20)) 
=> 30 

+ (voo2 (P double (P 1 Nil))) 
=> (P 20 Nil) 

+ (voo2 (P double Nil)) 
=> Nil 

+ ((/. (P f (P a b)) b) (P 1000 (P 1 2))) 
=> 2 

+ ((/. (P a b) a) (P 1 2)) 
=> 1 

+ (map2 (P double (P (P 1 (P 2 (P 3 Nil))) Nil))) 
=> (P 2 (P 4 (P 6 Nil))) 

+ ((/. 1 2) 1) 
=> 2 

+ ((/. (P 1 Nil) 2) (P 1 Nil)) 
=> 2 

+ ((/./. (/. 1 100) (/. 2 200)) 1) 
=> 100 

+ ((/./. (/. 1 100) (/. 2 200)) 2) 
=> 200 

+ ((/./. (/. (P 1 Nil) 100) (/. (P 2 Nil) 200)) (P 1 Nil)) 
=> 100 

+ ((/./. (/. (P 1 Nil) 100) (/. (P 2 Nil) 200)) (P 2 Nil)) 
=> 200 

+ ((/. (P quote (P Nil Nil)) 1) (P quote (P Nil Nil))) 
=> 1 

+ ((/. (P 'Nil Nil) 1) (P 'Nil Nil)) 
=> 1 

+ ((/. (P 1 (P 2 Nil)) 40) (P 1 (P 2 Nil))) 
=> 40 

+ ((/. (P a (P b Nil)) ((+ a) b)) (P 1 (P 2 Nil))) 
=> 3 

+ 1 
=> 1 

+ (/. x x) 
=> ($ (/. b828 ((/. x x) b828)) ()) 

+ ((/. x x) (P 1 Nil)) 
=> (P 1 Nil) 

+ ((/. y ((/. x x) (P y Nil))) (P 2 Nil)) 
=> (P (P 2 Nil) Nil) 

+ (/. (P a b) a) 
=> ($ (/. b844 (((if (pair? b844)) ((/. b (car b844)) (cdr b844))) TOPFAIL)) ()) 

+ ((/. (P a b) a) (P 1 2)) 
=> 1 

+ ((/. (P a b) b) (P 1 2)) 
=> 2 

