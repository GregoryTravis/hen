+ ((/. (x) x) Nil)
=> Nil
+ ((/. ((PP j k)) j) (PP 10 20))
=> 10
+ ((/. ((PP j k)) k) (PP 10 20))
=> 20
+ ((/. ((PP (PP j jj) (PP k r))) j) (PP (PP 10 100) (PP 20 30)))
=> 10
+ ((/. ((PP (PP j jj) (PP k r))) jj) (PP (PP 10 100) (PP 20 30)))
=> 100
+ ((/. ((PP (PP j jj) (PP k r))) k) (PP (PP 10 100) (PP 20 30)))
=> 20
+ ((/. ((PP (PP j jj) (PP k r))) r) (PP (PP 10 100) (PP 20 30)))
=> 30
+ ((/. ((PP j (PP k r))) j) (PP 10 (PP 20 30)))
=> 10
+ ((/. ((PP j (PP k r))) k) (PP 10 (PP 20 30)))
=> 20
+ ((/. ((PP j (PP k r))) r) (PP 10 (PP 20 30)))
=> 30
+ ((/. ((PP (PP j jj) q)) j) (PP (PP 10 100) 20))
=> 10
+ ((/. ((PP (PP j jj) q)) jj) (PP (PP 10 100) 20))
=> 100
+ ((/. ((PP (PP j jj) q)) q) (PP (PP 10 100) 20))
=> 20
+ ((/. (x) x) 1)
=> 1
+ ((/. (x) (x 2)) (/. (x) x))
=> 2
+ ((/. (r) r) 3)
=> 3
+ ((+ 10) 20)
=> 30
+ ((+ ((/. (x) x) 2000)) 3000)
=> 5000
+ ((== 30) 30)
=> True
+ ((== 30) 40)
=> False
+ (((if True) 100) 200)
=> 100
+ (((if False) 100) 200)
=> 200
+ (tuct 10)
=> 10
+ ((+ 20) (tuct 10))
=> 30
+ ((- 40) 15)
=> 25
+ ((* 10) 20)
=> 200
+ (((if ((== 0) 3)) True) False)
=> False
+ (((if ((== 0) 0)) True) False)
=> True
+ ((/. (n) (((if ((== n) 3)) True) False)) 3)
=> False
+ ((/. (n) (((if ((== n) 3)) True) False)) 0)
=> False
+ (((if ((== 0) 0)) ((* 10) 20)) ((* 30) 40))
=> 200
+ (((if ((== 3) 0)) ((* 10) 20)) ((* 30) 40))
=> 1200
+ ((/. (n) (((if ((== n) 0)) 1) ((* n) ((- n) 1)))) 3)
=> 6
+ (cons 1 2)
=> ($ 1 . 2)
+ (car (cons 1 2))
=> 1
+ (cdr (cons 1 2))
=> 2
+ (pair? (cons 1 2))
=> True
+ (pair? (car (cons 1 2)))
=> False
+ (pair? (cdr (cons 1 2)))
=> False
+ (pair? (Foo 10))
=> False
+ (pair? 10)
=> False
+ (pair? (car (cons (cons 1 2) 3)))
=> True
+ (double 10)
=> 20
+ (ones Nil)
=> Nil
+ (ones (PP 1 Nil))
=> ($ (PP 1 1))
+ (ones (PP 1 (PP 2 (PP 3 Nil))))
=> ($ (PP 1 1) (PP 1 2) (PP 1 3))
+ ((map3 double) (PP 1 (PP 2 (PP 3 Nil))))
=> (PP 2 (PP 4 (PP 6 Nil)))
+ ((map3 double) 1)
=> 1
+ ((/. (a . b) a) 1 . 2)
=> 1
+ ((/. (a . b) b) 1 . 2)
=> 2
+ (voo 1 2 . 3)
=> 5
+ (map2 double (PP 1 (PP 2 (PP 3 Nil))))
=> (PP 2 (PP 4 (PP 6 Nil)))
+ ((/. 1 2) . 1)
=> 2
+ ((/. (1) 2) 1)
=> 2
+ ((/./. (/. 1 100) (/. 2 200)) . 1)
=> 100
+ ((/./. (/. 1 100) (/. 2 200)) . 2)
=> 200
+ ((/./. (/. (1) 100) (/. (2) 200)) 1)
=> 100
+ ((/./. (/. (1) 100) (/. (2) 200)) 2)
=> 200
+ ((/. (quote joe) 1) quote joe)
=> 1
+ ((/. ((quote joe)) 1) (quote joe))
=> 1
+ ((/. (joe) joe) 1)
=> 1
+ ((/. (joe) 1) joee)
=> 1
+ ((/. (1 2) 40) 1 2)
=> 40
+ ((/. (a b) ((+ a) b)) 1 2)
=> 3
+ 1
=> 1
+ (Foo 1 2)
=> (Foo 1 2)
+ ((/. ((Foo a b)) a) (Foo 10 20))
=> 10
+ ((/. ((Foo a b)) b) (Foo 10 20))
=> 20
+ ((/. ((Foo a b)) ((+ a) b)) (Foo 10 20))
=> 30
+ ((/. ((Foo (Bar a) b)) a) (Foo (Bar 10) 20))
=> 10
+ ((/. ((Foo (Bar a) b)) b) (Foo (Bar 10) 20))
=> 20
+ ((/. ((Foo (Bar a) b)) ((+ a) b)) (Foo (Bar 10) 20))
=> 30
+ ((/. ((Foo a b)) a) (Foo (Bar 10) 20))
=> (Bar 10)
+ ((/. ((Foo a b)) b) (Foo (Bar 10) 20))
=> 20
+ (ones2 Nil)
=> Nil
+ (ones2 (PP 1 Nil))
=> ($ (PP 1 1))
+ (ones2 (PP 1 (PP 2 (PP 3 Nil))))
=> ($ (PP 1 1) (PP 1 2) (PP 1 3))
+ (voo20 1 2 . 3)
=> 5
+ (voo20 1 . 10)
=> 10
+ (map22 double (PP 1 (PP 2 (PP 3 Nil))))
=> (PP 2 (PP 4 (PP 6 Nil)))
+ (boit 1)
=> 100
+ (boit 2)
=> 200
+ (boit2 . 1)
=> 100
+ (boit2 . 2)
=> 200
+ (Cons 1 (Cons 2 Nil))
=> ($ 1 2)
+ ($ 1 2)
=> ($ 1 2)
+ (car ($ 1 2))
=> 1
+ (cdr ($ 1 2))
=> ($ 2)
+ (car (cdr ($ 1 2)))
=> 2
+ (cdr (cdr ($ 1 2)))
=> Nil
+ (fact 10)
=> 3628800
+ (X (quote shew) 65 (/. (x) x))
(SHEW 65)
=> Nil
+ (X (quote shew) 65 (/. (x) ($ x x)))
(SHEW 65)
=> ($ Nil Nil)
+ (X (quote shew) 65 (/. (x) (X (quote shew) 75 (/. (x) x))))
(SHEW 65)
(SHEW 75)
=> Nil
+ (X (quote shew) 65 (/. (x) (X (quote shew) 75 (/. (x) x))))
(SHEW 65)
(SHEW 75)
=> Nil
+ 110
=> 110
+ (X (quote create-int-ref) 10 id)
=> (Q #&10)
+ (X (quote create-int-ref) 10 (/. (r) (X (quote read-int-ref) r id)))
=> 10
+ (X (quote create-int-ref) 10 (/. (r) (X (quote read-int-ref) r (/. (x) (X (quote write-int-ref) ($ r 20) id)))))
=> Nil
+ (X (quote create-int-ref) 10 (/. (r) (X (quote read-int-ref) r (/. (x) (X (quote write-int-ref) ($ r 20) (/. (x) (X (quote read-int-ref) r id)))))))
=> 20
+ (X (quote create-int-ref) 10 (/. (r) (X (quote read-int-ref) r (/. (x) (X (quote shew) x (/. (x) (X (quote write-int-ref) ($ r 20) (/. (x) (X (quote read-int-ref) r id)))))))))
(SHEW 10)
=> 20
+ ((/. (x) x) Nil)
=> Nil
+ ((/. ((PP j k)) j) (PP 10 20))
=> 10
+ ((/. ((PP j k)) k) (PP 10 20))
=> 20
+ ((/. ((PP (PP j jj) (PP k r))) j) (PP (PP 10 100) (PP 20 30)))
=> 10
+ ((/. ((PP (PP j jj) (PP k r))) jj) (PP (PP 10 100) (PP 20 30)))
=> 100
+ ((/. ((PP (PP j jj) (PP k r))) k) (PP (PP 10 100) (PP 20 30)))
=> 20
+ ((/. ((PP (PP j jj) (PP k r))) r) (PP (PP 10 100) (PP 20 30)))
=> 30
+ ((/. ((PP j (PP k r))) j) (PP 10 (PP 20 30)))
=> 10
+ ((/. ((PP j (PP k r))) k) (PP 10 (PP 20 30)))
=> 20
+ ((/. ((PP j (PP k r))) r) (PP 10 (PP 20 30)))
=> 30
+ ((/. ((PP (PP j jj) q)) j) (PP (PP 10 100) 20))
=> 10
+ ((/. ((PP (PP j jj) q)) jj) (PP (PP 10 100) 20))
=> 100
+ ((/. ((PP (PP j jj) q)) q) (PP (PP 10 100) 20))
=> 20
+ ((/. (x) x) 1)
=> 1
+ ((/. (x) (x 2)) (/. (x) x))
=> 2
+ ((/. (r) r) 3)
=> 3
+ ((+ 10) 20)
=> 30
+ ((+ ((/. (x) x) 2000)) 3000)
=> 5000
+ ((== 30) 30)
=> True
+ ((== 30) 40)
=> False
+ (((if True) 100) 200)
=> 100
+ (((if False) 100) 200)
=> 200
+ (tuct 10)
=> 10
+ ((+ 20) (tuct 10))
=> 30
+ ((- 40) 15)
=> 25
+ ((* 10) 20)
=> 200
+ (((if ((== 0) 3)) True) False)
=> False
+ (((if ((== 0) 0)) True) False)
=> True
+ ((/. (n) (((if ((== n) 3)) True) False)) 3)
=> False
+ ((/. (n) (((if ((== n) 3)) True) False)) 0)
=> False
+ (((if ((== 0) 0)) ((* 10) 20)) ((* 30) 40))
=> 200
+ (((if ((== 3) 0)) ((* 10) 20)) ((* 30) 40))
=> 1200
+ ((/. (n) (((if ((== n) 0)) 1) ((* n) ((- n) 1)))) 3)
=> 6
+ (cons 1 2)
=> ($ 1 . 2)
+ (car (cons 1 2))
=> 1
+ (cdr (cons 1 2))
=> 2
+ (pair? (cons 1 2))
=> True
+ (pair? (car (cons 1 2)))
=> False
+ (pair? (cdr (cons 1 2)))
=> False
+ (pair? (Foo 10))
=> False
+ (pair? 10)
=> False
+ (pair? (car (cons (cons 1 2) 3)))
=> True
+ (double 10)
=> 20
+ (ones Nil)
=> Nil
+ (ones (PP 1 Nil))
=> ($ (PP 1 1))
+ (ones (PP 1 (PP 2 (PP 3 Nil))))
=> ($ (PP 1 1) (PP 1 2) (PP 1 3))
+ ((map3 double) (PP 1 (PP 2 (PP 3 Nil))))
=> (PP 2 (PP 4 (PP 6 Nil)))
+ ((map3 double) 1)
=> 1
+ ((/. (a . b) a) 1 . 2)
=> 1
+ ((/. (a . b) b) 1 . 2)
=> 2
+ (voo 1 2 . 3)
=> 5
+ (map2 double (PP 1 (PP 2 (PP 3 Nil))))
=> (PP 2 (PP 4 (PP 6 Nil)))
+ ((/. 1 2) . 1)
=> 2
+ ((/. (1) 2) 1)
=> 2
+ ((/./. (/. 1 100) (/. 2 200)) . 1)
=> 100
+ ((/./. (/. 1 100) (/. 2 200)) . 2)
=> 200
+ ((/./. (/. (1) 100) (/. (2) 200)) 1)
=> 100
+ ((/./. (/. (1) 100) (/. (2) 200)) 2)
=> 200
+ ((/. (quote joe) 1) quote joe)
=> 1
+ ((/. ((quote joe)) 1) (quote joe))
=> 1
+ ((/. (joe) joe) 1)
=> 1
+ ((/. (joe) 1) joee)
=> 1
+ ((/. (1 2) 40) 1 2)
=> 40
+ ((/. (a b) ((+ a) b)) 1 2)
=> 3
+ 1
=> 1
+ (Foo 1 2)
=> (Foo 1 2)
+ ((/. ((Foo a b)) a) (Foo 10 20))
=> 10
+ ((/. ((Foo a b)) b) (Foo 10 20))
=> 20
+ ((/. ((Foo a b)) ((+ a) b)) (Foo 10 20))
=> 30
+ ((/. ((Foo (Bar a) b)) a) (Foo (Bar 10) 20))
=> 10
+ ((/. ((Foo (Bar a) b)) b) (Foo (Bar 10) 20))
=> 20
+ ((/. ((Foo (Bar a) b)) ((+ a) b)) (Foo (Bar 10) 20))
=> 30
+ ((/. ((Foo a b)) a) (Foo (Bar 10) 20))
=> (Bar 10)
+ ((/. ((Foo a b)) b) (Foo (Bar 10) 20))
=> 20
+ (ones2 Nil)
=> Nil
+ (ones2 (PP 1 Nil))
=> ($ (PP 1 1))
+ (ones2 (PP 1 (PP 2 (PP 3 Nil))))
=> ($ (PP 1 1) (PP 1 2) (PP 1 3))
+ (voo20 1 2 . 3)
=> 5
+ (voo20 1 . 10)
=> 10
+ (map22 double (PP 1 (PP 2 (PP 3 Nil))))
=> (PP 2 (PP 4 (PP 6 Nil)))
+ (boit 1)
=> 100
+ (boit 2)
=> 200
+ (boit2 . 1)
=> 100
+ (boit2 . 2)
=> 200
+ (Cons 1 (Cons 2 Nil))
=> ($ 1 2)
+ ($ 1 2)
=> ($ 1 2)
+ (car ($ 1 2))
=> 1
+ (cdr ($ 1 2))
=> ($ 2)
+ (car (cdr ($ 1 2)))
=> 2
+ (cdr (cdr ($ 1 2)))
=> Nil
+ (fact 10)
=> 3628800
+ (X (quote shew) 65 (/. (x) x))
(SHEW 65)
=> Nil
+ (X (quote shew) 65 (/. (x) ($ x x)))
(SHEW 65)
=> ($ Nil Nil)
+ (X (quote shew) 65 (/. (x) (X (quote shew) 75 (/. (x) x))))
(SHEW 65)
(SHEW 75)
=> Nil
+ (X (quote shew) 65 (/. (x) (X (quote shew) 75 (/. (x) x))))
(SHEW 65)
(SHEW 75)
=> Nil
+ 110
=> 110
+ (X (quote create-int-ref) 10 id)
=> (Q)
+ (X (quote create-int-ref) 10 (/. (r) (X (quote read-int-ref) r id)))
=> 10
+ (X (quote create-int-ref) 10 (/. (r) (X (quote read-int-ref) r (/. (x) (X (quote write-int-ref) ($ r 20) id)))))
=> Nil
+ (X (quote create-int-ref) 10 (/. (r) (X (quote read-int-ref) r (/. (x) (X (quote write-int-ref) ($ r 20) (/. (x) (X (quote read-int-ref) r id)))))))
=> 20
+ (X (quote create-int-ref) 10 (/. (r) (X (quote read-int-ref) r (/. (x) (X (quote shew) x (/. (x) (X (quote write-int-ref) ($ r 20) (/. (x) (X (quote read-int-ref) r id)))))))))
(SHEW 10)
=> 20
+ (X (quote create-int-ref) 10 (/. (r) (X (quote read-int-ref) r (/. (x) (X (quote shew) x (/. (x) (X (quote write-int-ref) ($ r 20) (/. (x) (X (quote read-int-ref) r (/. (x) (X (quote shew) x (/. (x) (X (quote destroy-int-ref) r id)))))))))))))
(SHEW 10)
(SHEW 20)
=> Nil
+ gcc -std=c99 -g -o test-input test-input.ss.c vor.o spew.o mem.o fbo.o GLee.o -framework GLUT -framework OpenGL -framework CoreFoundation
+ gcc -std=c99 -g -o another-program another-program.ss.c vor.o spew.o mem.o fbo.o GLee.o -framework GLUT -framework OpenGL -framework CoreFoundation
