(load "lib.ss")
(load "sb.ss")
(load "primitives.ss")
(load "assemble.ss")

(define global-env '())
(define (create-global-env globals)
  (set! global-env (var-declarations->env globals)))
(define (var-declarations->env globals)
  (map var->binding globals))
(define (env-exists? env e)
  (not (eq? #f (assoc e env))))
(define (env-lookup env e)
  (assert (env-exists? env e))
  (cdr (assoc e env)))

(define (evl e rws) (shew e))

(define (preprocess src)
  (set! src (primitivize src))
  src)

(define (unpreprocess src)
  (set! src (unprimitivize src))
  src)

(define (gather-rws src) (grep fun? src))
(define (gather-vars src) (grep var? src))
(define (gather-exps src) (grep (fnot (for fun? var?)) src))

(define (run src)
  (let* ((src (preprocess src))
         (rws (gather-rws src))
         (globals (gather-vars src))
         (exps (gather-exps src)))
    (create-global-env globals)
    (map (lambda (e) (evl e rws)) exps)))

(define (go)
  (run (load-files (list "src.ss"))))
;(load "tracing.ss")
