(fun (id x) x)
(fun (foo a b) (Jerk b a))
(fun (foo a) (Jick a a))
(fun (bar a b cc) (foo cc))
(fun (boot (Hen x)) x)
(fun (ibb 12.0) 'yeah)
(fun (ibb 13.0) 'yeah2)
(fun (ibb x) 'nope)
(fun (gob 'asdf) 'yess)
(fun (gob 'zxcv) 'yess2)
(fun (gob x) 'no)
(fun (lep Tip) (Tap 10))
(fun (lep Tup) (Goop 10 20 30))
(fun (lep Tup r) (R r))
(fun (lep (Dag Dig)) Dog)
(fun (pip a) (== a True))
(fun (not True) False)
(fun (not False) True)
(fun (nun) 12)
(fun (ipp) (if (== 3 3) Yes No))
(fun (ig) (if False 1 2) )
(fun (gi) (if True 1 2) )
(fun (opp) (if (== 3 4) Yes No))
(fun (ipp a) (if (== 3 a) Yes No))
(fun (oq a b) (if (== a b) True False))
(fun (fact 0) 1)
(fun (fact n) (* n (fact (- n 1))))
(fun (apply f arg) (f arg))
(fun (dbl x) (+ x x))

(fun (rebuild (Cons a d)) (Cons a (rebuild d)))
(fun (rebuild Nil) Nil)

(fun (map f (Cons a d)) (Cons (f a) (map f d)))
(fun (map f Nil) Nil)

(fun (fold f e (Cons a d)) (f a (fold f e d)))
(fun (fold f e Nil) e)

(fun (vook a b c d) (Hoot d c b a))
(fun (joe a q) ((/. (b c) (vook b c a q)) a 1))

(fun (doublerer f) (/. (x) (* 2 (f x))))

(fun (length (Cons a d)) (+ 1 (length d)))
(fun (length Nil) 0)

(fun (ntimes 0 thunk) Nil)
(fun (ntimes n thunk) (Cons (thunk) (ntimes (- n 1) thunk)))

(fun (main) (Coot
             (bar 'aaaa 'bbbb 5.6)
             (bar 'aaaa 5.6 'bbbb)
             (foo 12.3)
             (foo 'aaa)
             (foo 'aaa 12.3)
             (foo 12.3 'aaa)
             (boot (Hen 40))
             (ibb 12.0)
             (ibb 13.0)
             (ibb 14.0)
             (ibb 'qwer)
             (gob 'asdf)
             (gob 'zxcv)
             (gob 'jones)
             (gob 17.8)
             (plus 3 5)
             (minus 3 5)
             (times 3 5)
             (div 3 5)
             (+ 3 5)
             (- 3 5)
             (* 3 5)
             (/ 3 5)
             (lep Tip)
             (lep Tup)
             (lep Tup 55)
             (lep (Dag Dig))
             (pip True)
             (pip False)
             (not True)
             (not False)
             (not (not True))
             (not (not False))
             (nun)
             (ipp)
             (opp)
             (ipp 3)
             (ipp 4)
             (ig)
             (gi)
             (oq 3 3)
             (oq 3 4)
             (oq True True)
             (oq False False)
             (oq True False)
             (oq False True)
             (oq 3 True)
             (oq True 3)
             (oq 'asdf 'asdf)
             (oq 'asdf Asdf)
             (oq 'asdf 3)
             (oq 4 'zxcv)
             (ipp 4)
             (== 3 4)
             (fact 10)
             (apply dbl 10)
             (rebuild (Cons 1 (Cons 2 (Cons 3 (Cons 4 Nil)))))
             (map dbl (Cons 1 (Cons 2 (Cons 3 (Cons 4 Nil)))))
             (length (Cons 1 (Cons 2 (Cons 3 (Cons 4 Nil)))))
             (fold + 0 (Cons 1 (Cons 2 (Cons 3 (Cons 4 Nil)))))
             (fold * 1 (Cons 1 (Cons 2 (Cons 3 (Cons 4 Nil)))))
             (joe 10 20)
             ((/. (x) x) 5)
             ((/. (f) (f 5)) (/. (p) p))
             (map (/. (x) (+ x x)) (Cons 1 (Cons 2 (Cons 3 (Cons 4 Nil)))))
             (map (/. (x) (* x x)) (Cons 1 (Cons 2 (Cons 3 (Cons 4 Nil)))))
             ((/. (x) (* x x)) 11)
             ((id id) 3)
             ((doublerer id) 4)
             (length (ntimes 10 (/. () (fact 10))))
             (ntimes 2 (/. () (fact 10)))
             (ntimes 3 (/. () 33))
             ))
