#!/usr/bin/env perl

use strict;

use Cmd;
use File;
use Shew;

my $debug = 0;

my %typedefs;
$typedefs{"GLbitfield"} = "unsigned int";
$typedefs{"GLclampd"} = "double";
$typedefs{"GLclampf"} = "float";
$typedefs{"GLdouble"} = "double";
$typedefs{"GLenum"} = "unsigned int";
$typedefs{"GLfloat"} = "float";
$typedefs{"GLint"} = "int";
$typedefs{"GLintptr"} = "long";
$typedefs{"GLintptrARB"} = "long";
$typedefs{"GLsizei"} = "int";
$typedefs{"GLsizeiptr"} = "long";
$typedefs{"GLsizeiptrARB"} = "long";
$typedefs{"GLuint"} = "unsigned int";

my $debug_this="";
#$debug_this = "cgGLSetDebugMode";

my @omit_these = ( "free", "glutCreateMenu" );
my %omit_these = map { $_=>1 } @omit_these;

my @hfiles = @ARGV;

my %defines = ();
my @funs = ();

sub add_underscore_if_capitalized($) {
  my ($s) = @_;
  my $c = substr($s, 0, 1);
  if ($c >= 'A' && $c <= 'Z') {
    $s = "_$s";
  }
  return $s;
}

foreach my $hfile (@hfiles) {
  my $ifile = $hfile;
  $ifile =~ s/\.h$/.i/;
  Cmd::cmd("rm -f $ifile");
  Cmd::cmd("gcc -E $hfile > $ifile");
  (-e $ifile) || die $!;

  my $hlines = File::readFileLines($hfile);
  my $ilines = File::readFileLines($ifile);

  foreach my $line (@$hlines) {
  #print $line;
    if ($line =~ /^.define\s+(\S+)\s*(.*)$/) {
      my $k = $1;
      my $v = $2;
      $k = add_underscore_if_capitalized($k);
      $defines{$k} = $v;
    }
  }

  #Shew::shew(\%defines);

  foreach my $line (@$ilines) {
    # Comments
    next if ($line =~ /^s*\/\//);

    $line =~ s/^\s*//;
    $line =~ s/\s*$//;
    $line =~ s/^\s*static\s*//;
    $line =~ s/^\s*extern\s*//;
    next if ($line =~ /^return/);
    $line =~ /^\s*(\S+)\s+(\w+)\s*\((.*)\)\s*;\s*$/ ||
        $line =~ /^\s*(const\s+\S+\s*\**)\s+(\w+)\s*\((.*)\)\s*;\s*$/
        || next;
    my $return_type = $1;
    my $fun_name = $2;
    my $args = $3;

    if (defined( $omit_these{$fun_name} )) {
      next;
    }

    my $ok = 1;

    print "+ $fun_name -> $return_type\n" if ($debug);
    my @args = split(/\s*,\s*/, $args);
    print("  " . join("\n  ", @args) . "\n") if ($debug);

    my @nargs = ();
    foreach my $arg (@args) {
      my @argwords = split(/\s+/, $arg);
      # Last word is name, rest is type.
      my $arg_name = pop(@argwords);
      my $type = join(" ", @argwords);
      push(@nargs, [$arg_name, $type]);
    }
    Shew::shew(\@nargs) if ($debug);

    push(@funs, [$fun_name, $return_type, \@nargs]);
  }

  Cmd::cmd("rm $ifile");
}

while (my ($k, $v) = each %defines) {
  print("(def $k $v)\n");
}

foreach my $fun (@funs) {
  my ($fun_name, $return_type, $args) = @$fun;
  my @names = map { $_->[0] } @$args;
  Shew::shew(\@names) if ($debug);
  my $names = join(" ", @names);
  # HEY hard-coded fbo_impl.
  print("(fun ($fun_name $names) (Command \'fbo_impl_$fun_name (\$ $names)))\n");
}
