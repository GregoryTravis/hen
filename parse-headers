#!/usr/bin/env perl

use strict;

use Cmd;
use File;
use Shew;

my $ignore_stuff_we_do_not_understand = 0;

my $debug = 0;

my %aliases;
$aliases{"GLbitfield"} = "unsigned int";
$aliases{"GLclampd"} = "double";
$aliases{"GLclampf"} = "float";
$aliases{"GLdouble"} = "double";
$aliases{"GLenum"} = "unsigned int";
$aliases{"GLfloat"} = "float";
$aliases{"GLint"} = "long";
$aliases{"GLint *"} = "long *";
$aliases{"const GLint *"} = "long *";
$aliases{"GLintptr"} = "long";
$aliases{"GLintptrARB"} = "long";
$aliases{"GLsizei"} = "int";
$aliases{"GLsizeiptr"} = "long";
$aliases{"GLsizeiptrARB"} = "long";
$aliases{"GLuint"} = "unsigned long";
$aliases{"GLuint *"} = "unsigned long *";
$aliases{"GLfloat *"} = "float *";
$aliases{"const GLfloat *"} = "float *";
$aliases{"const GLuint *"} = "unsigned long *";
$aliases{"GLboolean"} = "unsigned char";
$aliases{"const char *"} = "char *";
$aliases{"const GLvoid *"} = "void *";
$aliases{"CGbool"} = "int";
$aliases{"CGenum"} = "int";
$aliases{"CGerror"} = "int";
$aliases{"CGerror *"} = "int *";
$aliases{"CGGLenum"} = "int";

my $debug_this="";
#$debug_this = "cgGLSetDebugMode";

my $hfile = $ARGV[0];
#my $headers = $ARGV[1];

my %defines = ();
my @funs = ();

sub problem($) {
  my ($s) = @_;
  if ($ignore_stuff_we_do_not_understand) {
    if ($debug) {
      print "$s\n";
    }
  } else {
    die $s;
  }
}

sub fixup_value($) {
  my ($v) = @_;
  $v =~ s/^0x([0-9a-fA-F]+)$/\#x$1/;
  return $v;
}

sub add_underscore_if_capitalized($) {
  my ($s) = @_;
  if ($s =~ /^_*[A-Z]/) {
    $s = "_$s";
  }
  return $s;
}

  my $stub = $hfile;
  $stub =~ s/\.h$// || die;
  my $ifile = "$stub.i";
  Cmd::cmd("rm -f $ifile");
  Cmd::cmd("gcc -E $hfile > $ifile");
  (-e $ifile) || die $!;

  my $hlines = File::readFileLines($hfile);
  my $ilines = File::readFileLines($ifile);

  foreach my $line (@$hlines) {
  #print $line;
    if ($line =~ /^.define\s+(\S+)\s+(\S+)\s*$/) {
      my $k = $1;
      my $v = $2;
      $k = add_underscore_if_capitalized($k);
      $defines{$k} = $v;
    }
  }

  #Shew::shew(\%defines) if ($debug);

foreach my $line (@$ilines) {
  # Comments
  next if ($line =~ /^s*\/\//);

  $line =~ s/\*/ \* /g;
  $line =~ s/^\s*//;
  $line =~ s/\s*$//;
  $line =~ s/\s+/ /g;
  $line =~ s/^\s*static\s*//;
  $line =~ s/^\s*extern\s*//;
  next if ($line =~ /^return/);
  $line =~ /^\s*(\S+)\s+(\w+)\s*\((.*)\)\s*;\s*$/ ||
      $line =~ /^\s*(const\s+\S+\s*\**)\s+(\w+)\s*\((.*)\)\s*;\s*$/
      || next;
  my $return_type = $1;
  my $fun_name = $2;
  my $args = $3;

  if ($args =~ /^void( \S+)?$/) {
    $args = "";
  }

  $return_type = $aliases{$return_type} if (exists($aliases{$return_type}));

  my $ok = 1;

  print "+ $fun_name -> $return_type\n" if ($debug);
  my @args = split(/\s*,\s*/, $args);
  print "  " . join("\n  ", @args) . "\n" if ($debug);

  my @nargs = ();
  foreach my $arg (@args) {
    my @argwords = split(/\s+/, $arg);

    my $arg_name;
    my $type;

    # Function param?  (Can't handle ptrs to functions with args, cuz
    # of commas.
    if ($arg =~ /^void\s+\(\s*\*\s*(\S*)\s*\)\(\s*void\s*\)/) {
      $arg_name = $1;
      #$type = "void (*)(void)";
      $type = "vvfunp";
    } elsif ($arg =~ /^void\s+\(\s*\*\s*(\S*)\s*\)\(.*int.*int.*\)/) {
      $arg_name = $1;
      #$type = "void (*)(void)";
      $type = "viifunp";
    } elsif ($arg =~ /^void\s+\(\s*\*\s*(\S*)\s*\)\(.*unsigned char.*int.*int.*\)/) {
      $arg_name = $1;
      $type = "vuciifunp";
    } else {
      # Otherwise, assume it's like "unsigned long foo".  Last word is
      # name, rest is type.
      $arg_name = pop(@argwords);
      $type = join(" ", @argwords);
    }

    $type = $aliases{$type} if (exists($aliases{$type}));
    push(@nargs, [$arg_name, $type]);
  }
  #Shew::shew(\@nargs) if ($debug);

  my $command_name = $stub . "_impl_" . $fun_name;

  push(@funs, [$fun_name, $command_name, $return_type, \@nargs]);
}

Cmd::cmd("rm $ifile");

Shew::shew(\@funs) if ($debug);

open(STUB, ">$stub.stub.ss") || die $!;
open(IMPL_H, ">$stub.impl.h") || die $!;
open(IMPL_C, ">$stub.impl.c") || die $!;

# Defines.
while (my ($k, $v) = each %defines) {
  #$k = add_underscore_if_capitalized($k);
  $v = fixup_value($v);
  print STUB "(def $k $v)\n";
}

# Stubs.
foreach my $fun (@funs) {
  my ($fun_name, $command_name, $return_type, $args) = @$fun;
  my @names = map { $_->[0] } @$args;
  Shew::shew(\@names) if ($debug);
  my $names = join(" ", @names);
  $fun_name = add_underscore_if_capitalized($fun_name);
  print STUB "(fun ($fun_name $names) (Command \'$command_name (\$ $names)))\n";
}

my @headers = map { "\"$_.h\"" } ("a", "mem", "vor", $stub, "$stub.impl");
@headers = map { "#include $_\n" } @headers;
my $headers = join('', @headers);

print IMPL_C $headers;

# Impls.
my $registerers = "";
foreach my $fun (@funs) {
  my ($fun_name, $command_name, $return_type, $args) = @$fun;

  # If we fine something we don't understand, just punt.
  my $skip = 0;

  my @names = map { $_->[0] } @$args;

  my $arg_getters = "";
  $arg_getters .= "  yeah* __here = __arg;\n";
  foreach my $arg (@$args) {
    my ($name, $type) = @$arg;
    $name .= "_";
    $arg_getters .= "  yeah* $name = hcar(__here);\n  __here = hcdr(__here);\n";
  }
  $arg_getters .= "  A(isnil(__here));\n";

  my $arg_converters = "";
  foreach my $arg (@$args) {
    my ($name, $type) = @$arg;
    if ($type eq "int" || $type eq "unsigned long" || $type eq "unsigned int" || $type eq "long") {
      $arg_converters .=
        "  $type $name = getint(${name}_);\n";
    } elsif ($type eq "unsigned char") {
      $arg_converters .=
        "  $type $name = getuchar(${name}_);\n";
    } elsif ($type eq "float" || $type eq "double") {
      $arg_converters .=
        "  $type $name = getfloat(${name}_);\n";
    } elsif ($type eq "char *") {
      $arg_converters .=
        "  $type $name = stringval(${name}_);\n";
    } elsif ($type eq "unsigned long *") {
      $arg_converters .=
        "  $type $name = (unsigned long*)opaqueval(${name}_);\n";
    } elsif ($type eq "long *") {
      $arg_converters .=
        "  $type $name = (long*)opaqueval(${name}_);\n";
    } elsif ($type eq "unsigned int *") {
      $arg_converters .=
        "  $type $name = (unsigned int *)opaqueval(${name}_);\n";
    } elsif ($type eq "int *") {
      $arg_converters .=
        "  $type $name = (int *)opaqueval(${name}_);\n";
    } elsif ($type eq "float *") {
      $arg_converters .=
        "  $type $name = (float*)opaqueval(${name}_);\n";
    } elsif ($type eq "void *") {
      $arg_converters .=
        "  $type $name = opaqueval(${name}_);\n";
    } elsif ($type eq "char * *") {
      $arg_converters .=
        "  $type $name = (char**)opaqueval(${name}_);\n";
    } elsif ($type eq "vvfunp") {
      $arg_converters .=
        "  vvfunp $name = wrap_hen_fun_vvfunp(${name}_);\n";
    } elsif ($type eq "viifunp") {
      $arg_converters .=
        "  viifunp $name = wrap_hen_fun_viifunp(${name}_);\n";
    } elsif ($type eq "vuciifunp") {
      $arg_converters .=
        "  vuciifunp $name = wrap_hen_fun_vuciifunp(${name}_);\n";
    } elsif ($type eq "CGcontext" || $type eq "CGprofile" || $type eq "CGprogram") {
      $arg_converters .=
        "  $type $name = ($type)opaqueval(${name}_);\n";
    } else {
      problem("Don't know type '$type' ($fun_name)");
      $skip = 1;
    }
  }

  next if ($skip && $ignore_stuff_we_do_not_understand);

  my $call =
    ($return_type eq "void")
      ? "  $fun_name(" . join(", ", @names) . ");\n"
        : "  $return_type __ret = $fun_name(" . join(", ", @names) . ");\n";

  my $returner;
  if ($return_type eq "void") {
    $returner = "  return Nil;\n";
  } elsif ($return_type eq "int" || $return_type eq "unsigned long" || $return_type eq "unsigned int" || $return_type eq "unsigned char" || $return_type eq "long") {
    $returner = "  return integer(__ret);\n";
  } elsif ($return_type eq "float" || $return_type eq "double") {
    $returner = "  return flote(__ret);\n";
  } elsif ($return_type eq "char *") {
    $returner = "  return string(__ret);\n";
  } elsif ($return_type eq "unsigned int *") {
    $returner = "  return opaque((void*)__ret);\n";
  } elsif ($return_type eq "int *") {
    $returner = "  return opaque((void*)__ret);\n";
  } elsif ($return_type eq "float *") {
    $returner = "  return opaque((float*)__ret);\n";
  } elsif ($return_type eq "void *") {
    $returner = "  return opaque(__ret);\n";
  } elsif ($return_type eq "unsigned long *") {
    $returner = "  return opaque((void*)__ret);\n";
  } elsif ($return_type eq "long *") {
    $returner = "  return opaque((void*)__ret);\n";
  } elsif ($return_type eq "unsigned int *") {
    $returner = "  return opaque((void*)__ret);\n";
  } elsif ($return_type eq "void (*)(void)") {
    $returner = "  return opaque(__ret);\n";
  } elsif ($return_type eq "CGcontext" || $return_type eq "CGprofile" || $return_type eq "CGprogram") {
    $returner = "  return opaque(__ret);\n";
  } else {
    problem("Return type $return_type?");
    $skip = 1;
  }

  next if ($skip && $ignore_stuff_we_do_not_understand);

  my $all = "yeah* $command_name(yeah* __arg) {\n";
  $all .= $arg_getters;
  $all .= $arg_converters;
  $all .= $call;
  $all .= $returner;
  $all .= "}\n";

  $registerers .=
    qq[  register_command("$command_name", \&$command_name);\n];

  print IMPL_C "$all\n";
}

print IMPL_C <<EOF;
void ${stub}_impl_register() {
$registerers
}
EOF

print IMPL_H <<EOF;
extern void ${stub}_impl_register();
EOF

close(IMPL_C);
close(IMPL_H);
close(STUB);
