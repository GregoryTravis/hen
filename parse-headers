#!/usr/bin/env perl

use strict;

use Shew;

my @funs = ();

my %typedefs;
$typedefs{"GLbitfield"} = "unsigned int";
$typedefs{"GLclampd"} = "double";
$typedefs{"GLclampf"} = "float";
$typedefs{"GLdouble"} = "double";
$typedefs{"GLenum"} = "unsigned int";
$typedefs{"GLfloat"} = "float";
$typedefs{"GLint"} = "int";
$typedefs{"GLintptr"} = "long";
$typedefs{"GLintptrARB"} = "long";
$typedefs{"GLsizei"} = "int";
$typedefs{"GLsizeiptr"} = "long";
$typedefs{"GLsizeiptrARB"} = "long";
$typedefs{"GLuint"} = "unsigned int";

my $debug_this="";
#$debug_this = "cgGLSetDebugMode";

my @omit_these = ( "free", "glutCreateMenu" );
my %omit_these = map { $_=>1 } @omit_these;

while (<>)
{
  my $line = $_;

  # Comments
  next if ($line =~ /^s*\/\//);

  $line =~ s/^\s*//;
  $line =~ s/\s*$//;
  $line =~ s/^\s*static\s*//;
  $line =~ s/^\s*extern\s*//;
  next if ($line =~ /^return/);
  $line =~ /^\s*(\S+)\s+(\w+)\s*\((.*)\)\s*;\s*$/ ||
      $line =~ /^\s*(const\s+\S+\s*\**)\s+(\w+)\s*\((.*)\)\s*;\s*$/
      || next;
  my $return_type = $1;
  my $fun_name = $2;
  my $args = $3;

  if (defined( $omit_these{$fun_name} )) {
    next;
  }

  my $ok = 1;

  print "+ $fun_name -> $return_type\n";
  my @args = split(/\s*,\s*/, $args);
  print("  " . join("\n  ", @args) . "\n");

  my @nargs = ();
  foreach my $arg (@args) {
    my @argwords = split(/\s+/, $arg);
    # Last word is name, rest is type.
    my $arg_name = pop(@argwords);
    my $type = join(" ", @argwords);
    push(@nargs, [$arg_name, $type];
  }
  Shew::shew(\@nargs);
}
